# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Acpcc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class UserTapEventSpNpcOneSlot(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UserTapEventSpNpcOneSlot()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsUserTapEventSpNpcOneSlot(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # UserTapEventSpNpcOneSlot
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # UserTapEventSpNpcOneSlot
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserTapEventSpNpcOneSlot
    def NpcLabel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # UserTapEventSpNpcOneSlot
    def SpecialNpcRefreshTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # UserTapEventSpNpcOneSlot
    def SpecialNpcConversation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def UserTapEventSpNpcOneSlotStart(builder):
    builder.StartObject(4)

def Start(builder):
    UserTapEventSpNpcOneSlotStart(builder)

def UserTapEventSpNpcOneSlotAddId(builder, id):
    builder.PrependUint32Slot(0, id, 0)

def AddId(builder, id):
    UserTapEventSpNpcOneSlotAddId(builder, id)

def UserTapEventSpNpcOneSlotAddNpcLabel(builder, npcLabel):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(npcLabel), 0)

def AddNpcLabel(builder, npcLabel):
    UserTapEventSpNpcOneSlotAddNpcLabel(builder, npcLabel)

def UserTapEventSpNpcOneSlotAddSpecialNpcRefreshTime(builder, specialNpcRefreshTime):
    builder.PrependInt64Slot(2, specialNpcRefreshTime, 0)

def AddSpecialNpcRefreshTime(builder, specialNpcRefreshTime):
    UserTapEventSpNpcOneSlotAddSpecialNpcRefreshTime(builder, specialNpcRefreshTime)

def UserTapEventSpNpcOneSlotAddSpecialNpcConversation(builder, specialNpcConversation):
    builder.PrependBoolSlot(3, specialNpcConversation, 0)

def AddSpecialNpcConversation(builder, specialNpcConversation):
    UserTapEventSpNpcOneSlotAddSpecialNpcConversation(builder, specialNpcConversation)

def UserTapEventSpNpcOneSlotEnd(builder):
    return builder.EndObject()

def End(builder):
    return UserTapEventSpNpcOneSlotEnd(builder)
