# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Acpcc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class UserCarRoomOneSlot(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UserCarRoomOneSlot()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsUserCarRoomOneSlot(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # UserCarRoomOneSlot
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # UserCarRoomOneSlot
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserCarRoomOneSlot
    def CarId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserCarRoomOneSlot
    def Floor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserCarRoomOneSlot
    def PosX(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserCarRoomOneSlot
    def PosY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserCarRoomOneSlot
    def PosZ(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserCarRoomOneSlot
    def RotY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserCarRoomOneSlot
    def Label(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # UserCarRoomOneSlot
    def Guid(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # UserCarRoomOneSlot
    def Swicth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def UserCarRoomOneSlotStart(builder):
    builder.StartObject(10)

def Start(builder):
    UserCarRoomOneSlotStart(builder)

def UserCarRoomOneSlotAddId(builder, id):
    builder.PrependUint32Slot(0, id, 0)

def AddId(builder, id):
    UserCarRoomOneSlotAddId(builder, id)

def UserCarRoomOneSlotAddCarId(builder, carId):
    builder.PrependInt32Slot(1, carId, 0)

def AddCarId(builder, carId):
    UserCarRoomOneSlotAddCarId(builder, carId)

def UserCarRoomOneSlotAddFloor(builder, floor):
    builder.PrependInt32Slot(2, floor, 0)

def AddFloor(builder, floor):
    UserCarRoomOneSlotAddFloor(builder, floor)

def UserCarRoomOneSlotAddPosX(builder, posX):
    builder.PrependInt32Slot(3, posX, 0)

def AddPosX(builder, posX):
    UserCarRoomOneSlotAddPosX(builder, posX)

def UserCarRoomOneSlotAddPosY(builder, posY):
    builder.PrependInt32Slot(4, posY, 0)

def AddPosY(builder, posY):
    UserCarRoomOneSlotAddPosY(builder, posY)

def UserCarRoomOneSlotAddPosZ(builder, posZ):
    builder.PrependInt32Slot(5, posZ, 0)

def AddPosZ(builder, posZ):
    UserCarRoomOneSlotAddPosZ(builder, posZ)

def UserCarRoomOneSlotAddRotY(builder, rotY):
    builder.PrependInt32Slot(6, rotY, 0)

def AddRotY(builder, rotY):
    UserCarRoomOneSlotAddRotY(builder, rotY)

def UserCarRoomOneSlotAddLabel(builder, label):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(label), 0)

def AddLabel(builder, label):
    UserCarRoomOneSlotAddLabel(builder, label)

def UserCarRoomOneSlotAddGuid(builder, guid):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(guid), 0)

def AddGuid(builder, guid):
    UserCarRoomOneSlotAddGuid(builder, guid)

def UserCarRoomOneSlotAddSwicth(builder, swicth):
    builder.PrependBoolSlot(9, swicth, 0)

def AddSwicth(builder, swicth):
    UserCarRoomOneSlotAddSwicth(builder, swicth)

def UserCarRoomOneSlotEnd(builder):
    return builder.EndObject()

def End(builder):
    return UserCarRoomOneSlotEnd(builder)
