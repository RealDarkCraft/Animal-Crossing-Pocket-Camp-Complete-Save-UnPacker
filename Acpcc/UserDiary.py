# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Acpcc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class UserDiary(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UserDiary()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsUserDiary(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # UserDiary
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # UserDiary
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserDiary
    def EventCheckId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserDiary
    def NpcId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserDiary
    def StickerIndutionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserDiary
    def StickerPutCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserDiary
    def IsTutorialEnd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # UserDiary
    def FreeExteriorExchange(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # UserDiary
    def LastRefreshTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # UserDiary
    def SaleStickerPackIndex(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # UserDiary
    def SaleStickerPackIndexAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # UserDiary
    def SaleStickerPackIndexLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # UserDiary
    def SaleStickerPackIndexIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # UserDiary
    def SaleStickerPackId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # UserDiary
    def SaleStickerPackIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # UserDiary
    def SaleStickerPackIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # UserDiary
    def SaleStickerPackIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

    # UserDiary
    def SaleStickerStatus(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # UserDiary
    def SaleStickerStatusAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # UserDiary
    def SaleStickerStatusLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # UserDiary
    def SaleStickerStatusIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

    # UserDiary
    def StickerPackRefreshTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # UserDiary
    def LocalCacheTimeStamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # UserDiary
    def InductionAnsweredCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserDiary
    def ReceivedPresentCommentId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # UserDiary
    def ReceivedPresentCommentIdAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # UserDiary
    def ReceivedPresentCommentIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # UserDiary
    def ReceivedPresentCommentIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        return o == 0

    # UserDiary
    def FirstBenefitsStatus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # UserDiary
    def DateChangeTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def UserDiaryStart(builder):
    builder.StartObject(17)

def Start(builder):
    UserDiaryStart(builder)

def UserDiaryAddId(builder, id):
    builder.PrependUint32Slot(0, id, 0)

def AddId(builder, id):
    UserDiaryAddId(builder, id)

def UserDiaryAddEventCheckId(builder, eventCheckId):
    builder.PrependUint32Slot(1, eventCheckId, 0)

def AddEventCheckId(builder, eventCheckId):
    UserDiaryAddEventCheckId(builder, eventCheckId)

def UserDiaryAddNpcId(builder, npcId):
    builder.PrependUint32Slot(2, npcId, 0)

def AddNpcId(builder, npcId):
    UserDiaryAddNpcId(builder, npcId)

def UserDiaryAddStickerIndutionId(builder, stickerIndutionId):
    builder.PrependUint32Slot(3, stickerIndutionId, 0)

def AddStickerIndutionId(builder, stickerIndutionId):
    UserDiaryAddStickerIndutionId(builder, stickerIndutionId)

def UserDiaryAddStickerPutCount(builder, stickerPutCount):
    builder.PrependInt32Slot(4, stickerPutCount, 0)

def AddStickerPutCount(builder, stickerPutCount):
    UserDiaryAddStickerPutCount(builder, stickerPutCount)

def UserDiaryAddIsTutorialEnd(builder, isTutorialEnd):
    builder.PrependBoolSlot(5, isTutorialEnd, 0)

def AddIsTutorialEnd(builder, isTutorialEnd):
    UserDiaryAddIsTutorialEnd(builder, isTutorialEnd)

def UserDiaryAddFreeExteriorExchange(builder, freeExteriorExchange):
    builder.PrependUint8Slot(6, freeExteriorExchange, 0)

def AddFreeExteriorExchange(builder, freeExteriorExchange):
    UserDiaryAddFreeExteriorExchange(builder, freeExteriorExchange)

def UserDiaryAddLastRefreshTime(builder, lastRefreshTime):
    builder.PrependInt64Slot(7, lastRefreshTime, 0)

def AddLastRefreshTime(builder, lastRefreshTime):
    UserDiaryAddLastRefreshTime(builder, lastRefreshTime)

def UserDiaryAddSaleStickerPackIndex(builder, saleStickerPackIndex):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(saleStickerPackIndex), 0)

def AddSaleStickerPackIndex(builder, saleStickerPackIndex):
    UserDiaryAddSaleStickerPackIndex(builder, saleStickerPackIndex)

def UserDiaryStartSaleStickerPackIndexVector(builder, numElems):
    return builder.StartVector(1, numElems, 1)

def StartSaleStickerPackIndexVector(builder, numElems):
    return UserDiaryStartSaleStickerPackIndexVector(builder, numElems)

def UserDiaryAddSaleStickerPackId(builder, saleStickerPackId):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(saleStickerPackId), 0)

def AddSaleStickerPackId(builder, saleStickerPackId):
    UserDiaryAddSaleStickerPackId(builder, saleStickerPackId)

def UserDiaryStartSaleStickerPackIdVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSaleStickerPackIdVector(builder, numElems):
    return UserDiaryStartSaleStickerPackIdVector(builder, numElems)

def UserDiaryAddSaleStickerStatus(builder, saleStickerStatus):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(saleStickerStatus), 0)

def AddSaleStickerStatus(builder, saleStickerStatus):
    UserDiaryAddSaleStickerStatus(builder, saleStickerStatus)

def UserDiaryStartSaleStickerStatusVector(builder, numElems):
    return builder.StartVector(1, numElems, 1)

def StartSaleStickerStatusVector(builder, numElems):
    return UserDiaryStartSaleStickerStatusVector(builder, numElems)

def UserDiaryAddStickerPackRefreshTime(builder, stickerPackRefreshTime):
    builder.PrependInt64Slot(11, stickerPackRefreshTime, 0)

def AddStickerPackRefreshTime(builder, stickerPackRefreshTime):
    UserDiaryAddStickerPackRefreshTime(builder, stickerPackRefreshTime)

def UserDiaryAddLocalCacheTimeStamp(builder, localCacheTimeStamp):
    builder.PrependInt64Slot(12, localCacheTimeStamp, 0)

def AddLocalCacheTimeStamp(builder, localCacheTimeStamp):
    UserDiaryAddLocalCacheTimeStamp(builder, localCacheTimeStamp)

def UserDiaryAddInductionAnsweredCount(builder, inductionAnsweredCount):
    builder.PrependInt32Slot(13, inductionAnsweredCount, 0)

def AddInductionAnsweredCount(builder, inductionAnsweredCount):
    UserDiaryAddInductionAnsweredCount(builder, inductionAnsweredCount)

def UserDiaryAddReceivedPresentCommentId(builder, receivedPresentCommentId):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(receivedPresentCommentId), 0)

def AddReceivedPresentCommentId(builder, receivedPresentCommentId):
    UserDiaryAddReceivedPresentCommentId(builder, receivedPresentCommentId)

def UserDiaryStartReceivedPresentCommentIdVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartReceivedPresentCommentIdVector(builder, numElems):
    return UserDiaryStartReceivedPresentCommentIdVector(builder, numElems)

def UserDiaryAddFirstBenefitsStatus(builder, firstBenefitsStatus):
    builder.PrependUint8Slot(15, firstBenefitsStatus, 0)

def AddFirstBenefitsStatus(builder, firstBenefitsStatus):
    UserDiaryAddFirstBenefitsStatus(builder, firstBenefitsStatus)

def UserDiaryAddDateChangeTime(builder, dateChangeTime):
    builder.PrependInt64Slot(16, dateChangeTime, 0)

def AddDateChangeTime(builder, dateChangeTime):
    UserDiaryAddDateChangeTime(builder, dateChangeTime)

def UserDiaryEnd(builder):
    return builder.EndObject()

def End(builder):
    return UserDiaryEnd(builder)
