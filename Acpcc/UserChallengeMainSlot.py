# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Acpcc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class UserChallengeMainSlot(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UserChallengeMainSlot()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsUserChallengeMainSlot(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # UserChallengeMainSlot
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # UserChallengeMainSlot
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserChallengeMainSlot
    def CheckedPageIdNormalList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # UserChallengeMainSlot
    def CheckedPageIdNormalListAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # UserChallengeMainSlot
    def CheckedPageIdNormalListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # UserChallengeMainSlot
    def CheckedPageIdNormalListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # UserChallengeMainSlot
    def CheckedPageIdDailyList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # UserChallengeMainSlot
    def CheckedPageIdDailyListAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # UserChallengeMainSlot
    def CheckedPageIdDailyListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # UserChallengeMainSlot
    def CheckedPageIdDailyListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # UserChallengeMainSlot
    def CheckedPageIdCampaignList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # UserChallengeMainSlot
    def CheckedPageIdCampaignListAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # UserChallengeMainSlot
    def CheckedPageIdCampaignListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # UserChallengeMainSlot
    def CheckedPageIdCampaignListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # UserChallengeMainSlot
    def CheckedPageIdDailyTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def UserChallengeMainSlotStart(builder):
    builder.StartObject(5)

def Start(builder):
    UserChallengeMainSlotStart(builder)

def UserChallengeMainSlotAddId(builder, id):
    builder.PrependUint32Slot(0, id, 0)

def AddId(builder, id):
    UserChallengeMainSlotAddId(builder, id)

def UserChallengeMainSlotAddCheckedPageIdNormalList(builder, checkedPageIdNormalList):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(checkedPageIdNormalList), 0)

def AddCheckedPageIdNormalList(builder, checkedPageIdNormalList):
    UserChallengeMainSlotAddCheckedPageIdNormalList(builder, checkedPageIdNormalList)

def UserChallengeMainSlotStartCheckedPageIdNormalListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartCheckedPageIdNormalListVector(builder, numElems):
    return UserChallengeMainSlotStartCheckedPageIdNormalListVector(builder, numElems)

def UserChallengeMainSlotAddCheckedPageIdDailyList(builder, checkedPageIdDailyList):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(checkedPageIdDailyList), 0)

def AddCheckedPageIdDailyList(builder, checkedPageIdDailyList):
    UserChallengeMainSlotAddCheckedPageIdDailyList(builder, checkedPageIdDailyList)

def UserChallengeMainSlotStartCheckedPageIdDailyListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartCheckedPageIdDailyListVector(builder, numElems):
    return UserChallengeMainSlotStartCheckedPageIdDailyListVector(builder, numElems)

def UserChallengeMainSlotAddCheckedPageIdCampaignList(builder, checkedPageIdCampaignList):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(checkedPageIdCampaignList), 0)

def AddCheckedPageIdCampaignList(builder, checkedPageIdCampaignList):
    UserChallengeMainSlotAddCheckedPageIdCampaignList(builder, checkedPageIdCampaignList)

def UserChallengeMainSlotStartCheckedPageIdCampaignListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartCheckedPageIdCampaignListVector(builder, numElems):
    return UserChallengeMainSlotStartCheckedPageIdCampaignListVector(builder, numElems)

def UserChallengeMainSlotAddCheckedPageIdDailyTime(builder, checkedPageIdDailyTime):
    builder.PrependInt64Slot(4, checkedPageIdDailyTime, 0)

def AddCheckedPageIdDailyTime(builder, checkedPageIdDailyTime):
    UserChallengeMainSlotAddCheckedPageIdDailyTime(builder, checkedPageIdDailyTime)

def UserChallengeMainSlotEnd(builder):
    return builder.EndObject()

def End(builder):
    return UserChallengeMainSlotEnd(builder)
