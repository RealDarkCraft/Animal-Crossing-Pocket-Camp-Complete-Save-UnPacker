# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Acpcc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class UserTradingShipDataInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UserTradingShipDataInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsUserTradingShipDataInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # UserTradingShipDataInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # UserTradingShipDataInfo
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserTradingShipDataInfo
    def FirstTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # UserTradingShipDataInfo
    def TotalPoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserTradingShipDataInfo
    def RequestTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # UserTradingShipDataInfo
    def ItemIdArray(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # UserTradingShipDataInfo
    def ItemIdArrayAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # UserTradingShipDataInfo
    def ItemIdArrayLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # UserTradingShipDataInfo
    def ItemIdArrayIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # UserTradingShipDataInfo
    def Direction(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def UserTradingShipDataInfoStart(builder):
    builder.StartObject(6)

def Start(builder):
    UserTradingShipDataInfoStart(builder)

def UserTradingShipDataInfoAddId(builder, id):
    builder.PrependUint32Slot(0, id, 0)

def AddId(builder, id):
    UserTradingShipDataInfoAddId(builder, id)

def UserTradingShipDataInfoAddFirstTime(builder, firstTime):
    builder.PrependBoolSlot(1, firstTime, 0)

def AddFirstTime(builder, firstTime):
    UserTradingShipDataInfoAddFirstTime(builder, firstTime)

def UserTradingShipDataInfoAddTotalPoint(builder, totalPoint):
    builder.PrependUint32Slot(2, totalPoint, 0)

def AddTotalPoint(builder, totalPoint):
    UserTradingShipDataInfoAddTotalPoint(builder, totalPoint)

def UserTradingShipDataInfoAddRequestTime(builder, requestTime):
    builder.PrependInt64Slot(3, requestTime, 0)

def AddRequestTime(builder, requestTime):
    UserTradingShipDataInfoAddRequestTime(builder, requestTime)

def UserTradingShipDataInfoAddItemIdArray(builder, itemIdArray):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(itemIdArray), 0)

def AddItemIdArray(builder, itemIdArray):
    UserTradingShipDataInfoAddItemIdArray(builder, itemIdArray)

def UserTradingShipDataInfoStartItemIdArrayVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartItemIdArrayVector(builder, numElems):
    return UserTradingShipDataInfoStartItemIdArrayVector(builder, numElems)

def UserTradingShipDataInfoAddDirection(builder, direction):
    builder.PrependInt32Slot(5, direction, 0)

def AddDirection(builder, direction):
    UserTradingShipDataInfoAddDirection(builder, direction)

def UserTradingShipDataInfoEnd(builder):
    return builder.EndObject()

def End(builder):
    return UserTradingShipDataInfoEnd(builder)
