# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Acpcc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class UserEventLogSlot(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UserEventLogSlot()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsUserEventLogSlot(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # UserEventLogSlot
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # UserEventLogSlot
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserEventLogSlot
    def IsFixed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # UserEventLogSlot
    def CampaignId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserEventLogSlot
    def TotalPoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # UserEventLogSlot
    def EventType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserEventLogSlot
    def EventNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserEventLogSlot
    def RewardItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserEventLogSlot
    def LabelList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # UserEventLogSlot
    def LabelListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # UserEventLogSlot
    def LabelListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # UserEventLogSlot
    def State(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def UserEventLogSlotStart(builder):
    builder.StartObject(9)

def Start(builder):
    UserEventLogSlotStart(builder)

def UserEventLogSlotAddId(builder, id):
    builder.PrependUint32Slot(0, id, 0)

def AddId(builder, id):
    UserEventLogSlotAddId(builder, id)

def UserEventLogSlotAddIsFixed(builder, isFixed):
    builder.PrependBoolSlot(1, isFixed, 0)

def AddIsFixed(builder, isFixed):
    UserEventLogSlotAddIsFixed(builder, isFixed)

def UserEventLogSlotAddCampaignId(builder, campaignId):
    builder.PrependUint32Slot(2, campaignId, 0)

def AddCampaignId(builder, campaignId):
    UserEventLogSlotAddCampaignId(builder, campaignId)

def UserEventLogSlotAddTotalPoint(builder, totalPoint):
    builder.PrependInt64Slot(3, totalPoint, 0)

def AddTotalPoint(builder, totalPoint):
    UserEventLogSlotAddTotalPoint(builder, totalPoint)

def UserEventLogSlotAddEventType(builder, eventType):
    builder.PrependInt32Slot(4, eventType, 0)

def AddEventType(builder, eventType):
    UserEventLogSlotAddEventType(builder, eventType)

def UserEventLogSlotAddEventNumber(builder, eventNumber):
    builder.PrependInt32Slot(5, eventNumber, 0)

def AddEventNumber(builder, eventNumber):
    UserEventLogSlotAddEventNumber(builder, eventNumber)

def UserEventLogSlotAddRewardItemId(builder, rewardItemId):
    builder.PrependUint32Slot(6, rewardItemId, 0)

def AddRewardItemId(builder, rewardItemId):
    UserEventLogSlotAddRewardItemId(builder, rewardItemId)

def UserEventLogSlotAddLabelList(builder, labelList):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(labelList), 0)

def AddLabelList(builder, labelList):
    UserEventLogSlotAddLabelList(builder, labelList)

def UserEventLogSlotStartLabelListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartLabelListVector(builder, numElems):
    return UserEventLogSlotStartLabelListVector(builder, numElems)

def UserEventLogSlotAddState(builder, state):
    builder.PrependInt32Slot(8, state, 0)

def AddState(builder, state):
    UserEventLogSlotAddState(builder, state)

def UserEventLogSlotEnd(builder):
    return builder.EndObject()

def End(builder):
    return UserEventLogSlotEnd(builder)
