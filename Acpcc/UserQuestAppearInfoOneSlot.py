# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Acpcc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class UserQuestAppearInfoOneSlot(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UserQuestAppearInfoOneSlot()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsUserQuestAppearInfoOneSlot(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # UserQuestAppearInfoOneSlot
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # UserQuestAppearInfoOneSlot
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserQuestAppearInfoOneSlot
    def DateTimeList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # UserQuestAppearInfoOneSlot
    def DateTimeListAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # UserQuestAppearInfoOneSlot
    def DateTimeListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # UserQuestAppearInfoOneSlot
    def DateTimeListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # UserQuestAppearInfoOneSlot
    def NpcLabelList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # UserQuestAppearInfoOneSlot
    def NpcLabelListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # UserQuestAppearInfoOneSlot
    def NpcLabelListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # UserQuestAppearInfoOneSlot
    def AppearLabel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def UserQuestAppearInfoOneSlotStart(builder):
    builder.StartObject(4)

def Start(builder):
    UserQuestAppearInfoOneSlotStart(builder)

def UserQuestAppearInfoOneSlotAddId(builder, id):
    builder.PrependUint32Slot(0, id, 0)

def AddId(builder, id):
    UserQuestAppearInfoOneSlotAddId(builder, id)

def UserQuestAppearInfoOneSlotAddDateTimeList(builder, dateTimeList):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(dateTimeList), 0)

def AddDateTimeList(builder, dateTimeList):
    UserQuestAppearInfoOneSlotAddDateTimeList(builder, dateTimeList)

def UserQuestAppearInfoOneSlotStartDateTimeListVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartDateTimeListVector(builder, numElems):
    return UserQuestAppearInfoOneSlotStartDateTimeListVector(builder, numElems)

def UserQuestAppearInfoOneSlotAddNpcLabelList(builder, npcLabelList):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(npcLabelList), 0)

def AddNpcLabelList(builder, npcLabelList):
    UserQuestAppearInfoOneSlotAddNpcLabelList(builder, npcLabelList)

def UserQuestAppearInfoOneSlotStartNpcLabelListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartNpcLabelListVector(builder, numElems):
    return UserQuestAppearInfoOneSlotStartNpcLabelListVector(builder, numElems)

def UserQuestAppearInfoOneSlotAddAppearLabel(builder, appearLabel):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(appearLabel), 0)

def AddAppearLabel(builder, appearLabel):
    UserQuestAppearInfoOneSlotAddAppearLabel(builder, appearLabel)

def UserQuestAppearInfoOneSlotEnd(builder):
    return builder.EndObject()

def End(builder):
    return UserQuestAppearInfoOneSlotEnd(builder)
