# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Acpcc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class UserConfig(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UserConfig()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsUserConfig(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # UserConfig
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # UserConfig
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserConfig
    def Bgm(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # UserConfig
    def Se(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # UserConfig
    def NotifyBazaar(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # UserConfig
    def SavePower(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # UserConfig
    def NotifyChallenge(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # UserConfig
    def NotifyFriend(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # UserConfig
    def OptInout(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # UserConfig
    def BonusStageHelpNotify(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # UserConfig
    def BonusStageUnlockedNotify(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # UserConfig
    def BazaarSoldNotify(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # UserConfig
    def FlowerbedAnimalReceivedNotify(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # UserConfig
    def LoginNotify(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # UserConfig
    def CraftNotify(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # UserConfig
    def TradingShipNotify(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # UserConfig
    def FortuneCookieNotify(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # UserConfig
    def IsNotifyInitialized(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # UserConfig
    def ConciergeRecommendInfo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # UserConfig
    def ConciergeProgressInfo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # UserConfig
    def SkipRepresentation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # UserConfig
    def AssistantNotify(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # UserConfig
    def PlayerRenameUtcTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # UserConfig
    def FriendGiftArrivalNotify(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # UserConfig
    def FriendGiftOpenNotify(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # UserConfig
    def IsLockItemRarity(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.BoolFlags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # UserConfig
    def IsLockItemRarityAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.BoolFlags, o)
        return 0

    # UserConfig
    def IsLockItemRarityLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # UserConfig
    def IsLockItemRarityIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        return o == 0

    # UserConfig
    def IsLockEventItem(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # UserConfig
    def SeasonEventNotify(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def UserConfigStart(builder):
    builder.StartObject(27)

def Start(builder):
    UserConfigStart(builder)

def UserConfigAddId(builder, id):
    builder.PrependUint32Slot(0, id, 0)

def AddId(builder, id):
    UserConfigAddId(builder, id)

def UserConfigAddBgm(builder, bgm):
    builder.PrependBoolSlot(1, bgm, 0)

def AddBgm(builder, bgm):
    UserConfigAddBgm(builder, bgm)

def UserConfigAddSe(builder, se):
    builder.PrependBoolSlot(2, se, 0)

def AddSe(builder, se):
    UserConfigAddSe(builder, se)

def UserConfigAddNotifyBazaar(builder, notifyBazaar):
    builder.PrependBoolSlot(3, notifyBazaar, 0)

def AddNotifyBazaar(builder, notifyBazaar):
    UserConfigAddNotifyBazaar(builder, notifyBazaar)

def UserConfigAddSavePower(builder, savePower):
    builder.PrependBoolSlot(4, savePower, 0)

def AddSavePower(builder, savePower):
    UserConfigAddSavePower(builder, savePower)

def UserConfigAddNotifyChallenge(builder, notifyChallenge):
    builder.PrependBoolSlot(5, notifyChallenge, 0)

def AddNotifyChallenge(builder, notifyChallenge):
    UserConfigAddNotifyChallenge(builder, notifyChallenge)

def UserConfigAddNotifyFriend(builder, notifyFriend):
    builder.PrependBoolSlot(6, notifyFriend, 0)

def AddNotifyFriend(builder, notifyFriend):
    UserConfigAddNotifyFriend(builder, notifyFriend)

def UserConfigAddOptInout(builder, optInout):
    builder.PrependBoolSlot(7, optInout, 0)

def AddOptInout(builder, optInout):
    UserConfigAddOptInout(builder, optInout)

def UserConfigAddBonusStageHelpNotify(builder, bonusStageHelpNotify):
    builder.PrependBoolSlot(8, bonusStageHelpNotify, 0)

def AddBonusStageHelpNotify(builder, bonusStageHelpNotify):
    UserConfigAddBonusStageHelpNotify(builder, bonusStageHelpNotify)

def UserConfigAddBonusStageUnlockedNotify(builder, bonusStageUnlockedNotify):
    builder.PrependBoolSlot(9, bonusStageUnlockedNotify, 0)

def AddBonusStageUnlockedNotify(builder, bonusStageUnlockedNotify):
    UserConfigAddBonusStageUnlockedNotify(builder, bonusStageUnlockedNotify)

def UserConfigAddBazaarSoldNotify(builder, bazaarSoldNotify):
    builder.PrependBoolSlot(10, bazaarSoldNotify, 0)

def AddBazaarSoldNotify(builder, bazaarSoldNotify):
    UserConfigAddBazaarSoldNotify(builder, bazaarSoldNotify)

def UserConfigAddFlowerbedAnimalReceivedNotify(builder, flowerbedAnimalReceivedNotify):
    builder.PrependBoolSlot(11, flowerbedAnimalReceivedNotify, 0)

def AddFlowerbedAnimalReceivedNotify(builder, flowerbedAnimalReceivedNotify):
    UserConfigAddFlowerbedAnimalReceivedNotify(builder, flowerbedAnimalReceivedNotify)

def UserConfigAddLoginNotify(builder, loginNotify):
    builder.PrependBoolSlot(12, loginNotify, 0)

def AddLoginNotify(builder, loginNotify):
    UserConfigAddLoginNotify(builder, loginNotify)

def UserConfigAddCraftNotify(builder, craftNotify):
    builder.PrependBoolSlot(13, craftNotify, 0)

def AddCraftNotify(builder, craftNotify):
    UserConfigAddCraftNotify(builder, craftNotify)

def UserConfigAddTradingShipNotify(builder, tradingShipNotify):
    builder.PrependBoolSlot(14, tradingShipNotify, 0)

def AddTradingShipNotify(builder, tradingShipNotify):
    UserConfigAddTradingShipNotify(builder, tradingShipNotify)

def UserConfigAddFortuneCookieNotify(builder, fortuneCookieNotify):
    builder.PrependBoolSlot(15, fortuneCookieNotify, 0)

def AddFortuneCookieNotify(builder, fortuneCookieNotify):
    UserConfigAddFortuneCookieNotify(builder, fortuneCookieNotify)

def UserConfigAddIsNotifyInitialized(builder, isNotifyInitialized):
    builder.PrependBoolSlot(16, isNotifyInitialized, 0)

def AddIsNotifyInitialized(builder, isNotifyInitialized):
    UserConfigAddIsNotifyInitialized(builder, isNotifyInitialized)

def UserConfigAddConciergeRecommendInfo(builder, conciergeRecommendInfo):
    builder.PrependBoolSlot(17, conciergeRecommendInfo, 0)

def AddConciergeRecommendInfo(builder, conciergeRecommendInfo):
    UserConfigAddConciergeRecommendInfo(builder, conciergeRecommendInfo)

def UserConfigAddConciergeProgressInfo(builder, conciergeProgressInfo):
    builder.PrependBoolSlot(18, conciergeProgressInfo, 0)

def AddConciergeProgressInfo(builder, conciergeProgressInfo):
    UserConfigAddConciergeProgressInfo(builder, conciergeProgressInfo)

def UserConfigAddSkipRepresentation(builder, skipRepresentation):
    builder.PrependBoolSlot(19, skipRepresentation, 0)

def AddSkipRepresentation(builder, skipRepresentation):
    UserConfigAddSkipRepresentation(builder, skipRepresentation)

def UserConfigAddAssistantNotify(builder, assistantNotify):
    builder.PrependBoolSlot(20, assistantNotify, 0)

def AddAssistantNotify(builder, assistantNotify):
    UserConfigAddAssistantNotify(builder, assistantNotify)

def UserConfigAddPlayerRenameUtcTime(builder, playerRenameUtcTime):
    builder.PrependInt64Slot(21, playerRenameUtcTime, 0)

def AddPlayerRenameUtcTime(builder, playerRenameUtcTime):
    UserConfigAddPlayerRenameUtcTime(builder, playerRenameUtcTime)

def UserConfigAddFriendGiftArrivalNotify(builder, friendGiftArrivalNotify):
    builder.PrependBoolSlot(22, friendGiftArrivalNotify, 0)

def AddFriendGiftArrivalNotify(builder, friendGiftArrivalNotify):
    UserConfigAddFriendGiftArrivalNotify(builder, friendGiftArrivalNotify)

def UserConfigAddFriendGiftOpenNotify(builder, friendGiftOpenNotify):
    builder.PrependBoolSlot(23, friendGiftOpenNotify, 0)

def AddFriendGiftOpenNotify(builder, friendGiftOpenNotify):
    UserConfigAddFriendGiftOpenNotify(builder, friendGiftOpenNotify)

def UserConfigAddIsLockItemRarity(builder, isLockItemRarity):
    builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(isLockItemRarity), 0)

def AddIsLockItemRarity(builder, isLockItemRarity):
    UserConfigAddIsLockItemRarity(builder, isLockItemRarity)

def UserConfigStartIsLockItemRarityVector(builder, numElems):
    return builder.StartVector(1, numElems, 1)

def StartIsLockItemRarityVector(builder, numElems):
    return UserConfigStartIsLockItemRarityVector(builder, numElems)

def UserConfigAddIsLockEventItem(builder, isLockEventItem):
    builder.PrependBoolSlot(25, isLockEventItem, 0)

def AddIsLockEventItem(builder, isLockEventItem):
    UserConfigAddIsLockEventItem(builder, isLockEventItem)

def UserConfigAddSeasonEventNotify(builder, seasonEventNotify):
    builder.PrependBoolSlot(26, seasonEventNotify, 0)

def AddSeasonEventNotify(builder, seasonEventNotify):
    UserConfigAddSeasonEventNotify(builder, seasonEventNotify)

def UserConfigEnd(builder):
    return builder.EndObject()

def End(builder):
    return UserConfigEnd(builder)
