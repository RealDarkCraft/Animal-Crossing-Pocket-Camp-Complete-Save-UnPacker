# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Acpcc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class UserProfile(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UserProfile()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsUserProfile(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # UserProfile
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # UserProfile
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserProfile
    def BirthDay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # UserProfile
    def Bell(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # UserProfile
    def Exp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # UserProfile
    def RegistedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # UserProfile
    def DealerCarlimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserProfile
    def MagicNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserProfile
    def NewLeafTicket(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def UserProfileStart(builder):
    builder.StartObject(8)

def Start(builder):
    UserProfileStart(builder)

def UserProfileAddId(builder, id):
    builder.PrependUint32Slot(0, id, 0)

def AddId(builder, id):
    UserProfileAddId(builder, id)

def UserProfileAddBirthDay(builder, birthDay):
    builder.PrependInt64Slot(1, birthDay, 0)

def AddBirthDay(builder, birthDay):
    UserProfileAddBirthDay(builder, birthDay)

def UserProfileAddBell(builder, bell):
    builder.PrependInt64Slot(2, bell, 0)

def AddBell(builder, bell):
    UserProfileAddBell(builder, bell)

def UserProfileAddExp(builder, exp):
    builder.PrependInt64Slot(3, exp, 0)

def AddExp(builder, exp):
    UserProfileAddExp(builder, exp)

def UserProfileAddRegistedAt(builder, registedAt):
    builder.PrependInt64Slot(4, registedAt, 0)

def AddRegistedAt(builder, registedAt):
    UserProfileAddRegistedAt(builder, registedAt)

def UserProfileAddDealerCarlimit(builder, dealerCarlimit):
    builder.PrependInt32Slot(5, dealerCarlimit, 0)

def AddDealerCarlimit(builder, dealerCarlimit):
    UserProfileAddDealerCarlimit(builder, dealerCarlimit)

def UserProfileAddMagicNumber(builder, magicNumber):
    builder.PrependInt32Slot(6, magicNumber, 0)

def AddMagicNumber(builder, magicNumber):
    UserProfileAddMagicNumber(builder, magicNumber)

def UserProfileAddNewLeafTicket(builder, newLeafTicket):
    builder.PrependInt64Slot(7, newLeafTicket, 0)

def AddNewLeafTicket(builder, newLeafTicket):
    UserProfileAddNewLeafTicket(builder, newLeafTicket)

def UserProfileEnd(builder):
    return builder.EndObject()

def End(builder):
    return UserProfileEnd(builder)
