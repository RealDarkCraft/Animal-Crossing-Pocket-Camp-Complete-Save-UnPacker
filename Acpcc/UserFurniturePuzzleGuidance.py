# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Acpcc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class UserFurniturePuzzleGuidance(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UserFurniturePuzzleGuidance()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsUserFurniturePuzzleGuidance(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # UserFurniturePuzzleGuidance
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # UserFurniturePuzzleGuidance
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserFurniturePuzzleGuidance
    def LastShowAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # UserFurniturePuzzleGuidance
    def FurnitureIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # UserFurniturePuzzleGuidance
    def FurnitureIdsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # UserFurniturePuzzleGuidance
    def FurnitureIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # UserFurniturePuzzleGuidance
    def FurnitureIdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def UserFurniturePuzzleGuidanceStart(builder):
    builder.StartObject(3)

def Start(builder):
    UserFurniturePuzzleGuidanceStart(builder)

def UserFurniturePuzzleGuidanceAddId(builder, id):
    builder.PrependUint32Slot(0, id, 0)

def AddId(builder, id):
    UserFurniturePuzzleGuidanceAddId(builder, id)

def UserFurniturePuzzleGuidanceAddLastShowAt(builder, lastShowAt):
    builder.PrependInt64Slot(1, lastShowAt, 0)

def AddLastShowAt(builder, lastShowAt):
    UserFurniturePuzzleGuidanceAddLastShowAt(builder, lastShowAt)

def UserFurniturePuzzleGuidanceAddFurnitureIds(builder, furnitureIds):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(furnitureIds), 0)

def AddFurnitureIds(builder, furnitureIds):
    UserFurniturePuzzleGuidanceAddFurnitureIds(builder, furnitureIds)

def UserFurniturePuzzleGuidanceStartFurnitureIdsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartFurnitureIdsVector(builder, numElems):
    return UserFurniturePuzzleGuidanceStartFurnitureIdsVector(builder, numElems)

def UserFurniturePuzzleGuidanceEnd(builder):
    return builder.EndObject()

def End(builder):
    return UserFurniturePuzzleGuidanceEnd(builder)
