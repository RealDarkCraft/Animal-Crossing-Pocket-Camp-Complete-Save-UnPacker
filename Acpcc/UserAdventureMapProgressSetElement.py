# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Acpcc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class UserAdventureMapProgressSetElement(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UserAdventureMapProgressSetElement()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsUserAdventureMapProgressSetElement(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # UserAdventureMapProgressSetElement
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # UserAdventureMapProgressSetElement
    def ItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserAdventureMapProgressSetElement
    def IsInProgress(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # UserAdventureMapProgressSetElement
    def PatternId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # UserAdventureMapProgressSetElement
    def CurrentSquare(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # UserAdventureMapProgressSetElement
    def NextDiceNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # UserAdventureMapProgressSetElement
    def RewardReceivedSquares(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # UserAdventureMapProgressSetElement
    def RewardReceivedSquaresAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # UserAdventureMapProgressSetElement
    def RewardReceivedSquaresLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # UserAdventureMapProgressSetElement
    def RewardReceivedSquaresIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # UserAdventureMapProgressSetElement
    def NextDiceTableIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserAdventureMapProgressSetElement
    def PatternTableIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserAdventureMapProgressSetElement
    def AdvancedMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

def UserAdventureMapProgressSetElementStart(builder):
    builder.StartObject(9)

def Start(builder):
    UserAdventureMapProgressSetElementStart(builder)

def UserAdventureMapProgressSetElementAddItemId(builder, itemId):
    builder.PrependUint32Slot(0, itemId, 0)

def AddItemId(builder, itemId):
    UserAdventureMapProgressSetElementAddItemId(builder, itemId)

def UserAdventureMapProgressSetElementAddIsInProgress(builder, isInProgress):
    builder.PrependBoolSlot(1, isInProgress, 0)

def AddIsInProgress(builder, isInProgress):
    UserAdventureMapProgressSetElementAddIsInProgress(builder, isInProgress)

def UserAdventureMapProgressSetElementAddPatternId(builder, patternId):
    builder.PrependUint8Slot(2, patternId, 0)

def AddPatternId(builder, patternId):
    UserAdventureMapProgressSetElementAddPatternId(builder, patternId)

def UserAdventureMapProgressSetElementAddCurrentSquare(builder, currentSquare):
    builder.PrependUint8Slot(3, currentSquare, 0)

def AddCurrentSquare(builder, currentSquare):
    UserAdventureMapProgressSetElementAddCurrentSquare(builder, currentSquare)

def UserAdventureMapProgressSetElementAddNextDiceNumber(builder, nextDiceNumber):
    builder.PrependUint8Slot(4, nextDiceNumber, 0)

def AddNextDiceNumber(builder, nextDiceNumber):
    UserAdventureMapProgressSetElementAddNextDiceNumber(builder, nextDiceNumber)

def UserAdventureMapProgressSetElementAddRewardReceivedSquares(builder, rewardReceivedSquares):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(rewardReceivedSquares), 0)

def AddRewardReceivedSquares(builder, rewardReceivedSquares):
    UserAdventureMapProgressSetElementAddRewardReceivedSquares(builder, rewardReceivedSquares)

def UserAdventureMapProgressSetElementStartRewardReceivedSquaresVector(builder, numElems):
    return builder.StartVector(1, numElems, 1)

def StartRewardReceivedSquaresVector(builder, numElems):
    return UserAdventureMapProgressSetElementStartRewardReceivedSquaresVector(builder, numElems)

def UserAdventureMapProgressSetElementAddNextDiceTableIndex(builder, nextDiceTableIndex):
    builder.PrependInt32Slot(6, nextDiceTableIndex, 0)

def AddNextDiceTableIndex(builder, nextDiceTableIndex):
    UserAdventureMapProgressSetElementAddNextDiceTableIndex(builder, nextDiceTableIndex)

def UserAdventureMapProgressSetElementAddPatternTableIndex(builder, patternTableIndex):
    builder.PrependInt32Slot(7, patternTableIndex, 0)

def AddPatternTableIndex(builder, patternTableIndex):
    UserAdventureMapProgressSetElementAddPatternTableIndex(builder, patternTableIndex)

def UserAdventureMapProgressSetElementAddAdvancedMode(builder, advancedMode):
    builder.PrependUint8Slot(8, advancedMode, 0)

def AddAdvancedMode(builder, advancedMode):
    UserAdventureMapProgressSetElementAddAdvancedMode(builder, advancedMode)

def UserAdventureMapProgressSetElementEnd(builder):
    return builder.EndObject()

def End(builder):
    return UserAdventureMapProgressSetElementEnd(builder)
