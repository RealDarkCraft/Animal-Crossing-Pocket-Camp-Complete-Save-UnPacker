# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Acpcc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class UserItemFlowerbedFlower(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UserItemFlowerbedFlower()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsUserItemFlowerbedFlower(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # UserItemFlowerbedFlower
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # UserItemFlowerbedFlower
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserItemFlowerbedFlower
    def Guid(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # UserItemFlowerbedFlower
    def DominantGene1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # UserItemFlowerbedFlower
    def DominantGene2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # UserItemFlowerbedFlower
    def GenePairs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Acpcc.UserItemFlowerbedGenePairNum import UserItemFlowerbedGenePairNum
            obj = UserItemFlowerbedGenePairNum()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # UserItemFlowerbedFlower
    def GenePairsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # UserItemFlowerbedFlower
    def GenePairsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

def UserItemFlowerbedFlowerStart(builder):
    builder.StartObject(5)

def Start(builder):
    UserItemFlowerbedFlowerStart(builder)

def UserItemFlowerbedFlowerAddId(builder, id):
    builder.PrependUint32Slot(0, id, 0)

def AddId(builder, id):
    UserItemFlowerbedFlowerAddId(builder, id)

def UserItemFlowerbedFlowerAddGuid(builder, guid):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(guid), 0)

def AddGuid(builder, guid):
    UserItemFlowerbedFlowerAddGuid(builder, guid)

def UserItemFlowerbedFlowerAddDominantGene1(builder, dominantGene1):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(dominantGene1), 0)

def AddDominantGene1(builder, dominantGene1):
    UserItemFlowerbedFlowerAddDominantGene1(builder, dominantGene1)

def UserItemFlowerbedFlowerAddDominantGene2(builder, dominantGene2):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(dominantGene2), 0)

def AddDominantGene2(builder, dominantGene2):
    UserItemFlowerbedFlowerAddDominantGene2(builder, dominantGene2)

def UserItemFlowerbedFlowerAddGenePairs(builder, genePairs):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(genePairs), 0)

def AddGenePairs(builder, genePairs):
    UserItemFlowerbedFlowerAddGenePairs(builder, genePairs)

def UserItemFlowerbedFlowerStartGenePairsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartGenePairsVector(builder, numElems):
    return UserItemFlowerbedFlowerStartGenePairsVector(builder, numElems)

def UserItemFlowerbedFlowerEnd(builder):
    return builder.EndObject()

def End(builder):
    return UserItemFlowerbedFlowerEnd(builder)
