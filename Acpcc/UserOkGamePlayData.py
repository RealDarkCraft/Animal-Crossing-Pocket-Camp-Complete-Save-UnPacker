# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Acpcc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class UserOkGamePlayData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UserOkGamePlayData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsUserOkGamePlayData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # UserOkGamePlayData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # UserOkGamePlayData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserOkGamePlayData
    def MedalNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserOkGamePlayData
    def DailyBigBonusWinCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserOkGamePlayData
    def CeilPlayCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserOkGamePlayData
    def DailyTradeCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserOkGamePlayData
    def DailyMedalGetNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def UserOkGamePlayDataStart(builder):
    builder.StartObject(6)

def Start(builder):
    UserOkGamePlayDataStart(builder)

def UserOkGamePlayDataAddId(builder, id):
    builder.PrependUint32Slot(0, id, 0)

def AddId(builder, id):
    UserOkGamePlayDataAddId(builder, id)

def UserOkGamePlayDataAddMedalNum(builder, medalNum):
    builder.PrependInt32Slot(1, medalNum, 0)

def AddMedalNum(builder, medalNum):
    UserOkGamePlayDataAddMedalNum(builder, medalNum)

def UserOkGamePlayDataAddDailyBigBonusWinCount(builder, dailyBigBonusWinCount):
    builder.PrependInt32Slot(2, dailyBigBonusWinCount, 0)

def AddDailyBigBonusWinCount(builder, dailyBigBonusWinCount):
    UserOkGamePlayDataAddDailyBigBonusWinCount(builder, dailyBigBonusWinCount)

def UserOkGamePlayDataAddCeilPlayCount(builder, ceilPlayCount):
    builder.PrependInt32Slot(3, ceilPlayCount, 0)

def AddCeilPlayCount(builder, ceilPlayCount):
    UserOkGamePlayDataAddCeilPlayCount(builder, ceilPlayCount)

def UserOkGamePlayDataAddDailyTradeCount(builder, dailyTradeCount):
    builder.PrependInt32Slot(4, dailyTradeCount, 0)

def AddDailyTradeCount(builder, dailyTradeCount):
    UserOkGamePlayDataAddDailyTradeCount(builder, dailyTradeCount)

def UserOkGamePlayDataAddDailyMedalGetNum(builder, dailyMedalGetNum):
    builder.PrependInt32Slot(5, dailyMedalGetNum, 0)

def AddDailyMedalGetNum(builder, dailyMedalGetNum):
    UserOkGamePlayDataAddDailyMedalGetNum(builder, dailyMedalGetNum)

def UserOkGamePlayDataEnd(builder):
    return builder.EndObject()

def End(builder):
    return UserOkGamePlayDataEnd(builder)
