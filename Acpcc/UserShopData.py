# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Acpcc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class UserShopData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UserShopData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsUserShopData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # UserShopData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # UserShopData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserShopData
    def IsFirstShop(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # UserShopData
    def NextDay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # UserShopData
    def TimeZoneNow(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserShopData
    def ShopOrderFtr(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # UserShopData
    def ShopOrderFtrAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # UserShopData
    def ShopOrderFtrLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # UserShopData
    def ShopOrderFtrIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # UserShopData
    def ShopOrderClt(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # UserShopData
    def ShopOrderCltAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # UserShopData
    def ShopOrderCltLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # UserShopData
    def ShopOrderCltIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # UserShopData
    def NeedShopUpdate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def UserShopDataStart(builder):
    builder.StartObject(7)

def Start(builder):
    UserShopDataStart(builder)

def UserShopDataAddId(builder, id):
    builder.PrependUint32Slot(0, id, 0)

def AddId(builder, id):
    UserShopDataAddId(builder, id)

def UserShopDataAddIsFirstShop(builder, isFirstShop):
    builder.PrependBoolSlot(1, isFirstShop, 0)

def AddIsFirstShop(builder, isFirstShop):
    UserShopDataAddIsFirstShop(builder, isFirstShop)

def UserShopDataAddNextDay(builder, nextDay):
    builder.PrependInt64Slot(2, nextDay, 0)

def AddNextDay(builder, nextDay):
    UserShopDataAddNextDay(builder, nextDay)

def UserShopDataAddTimeZoneNow(builder, timeZoneNow):
    builder.PrependInt32Slot(3, timeZoneNow, 0)

def AddTimeZoneNow(builder, timeZoneNow):
    UserShopDataAddTimeZoneNow(builder, timeZoneNow)

def UserShopDataAddShopOrderFtr(builder, shopOrderFtr):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(shopOrderFtr), 0)

def AddShopOrderFtr(builder, shopOrderFtr):
    UserShopDataAddShopOrderFtr(builder, shopOrderFtr)

def UserShopDataStartShopOrderFtrVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartShopOrderFtrVector(builder, numElems):
    return UserShopDataStartShopOrderFtrVector(builder, numElems)

def UserShopDataAddShopOrderClt(builder, shopOrderClt):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(shopOrderClt), 0)

def AddShopOrderClt(builder, shopOrderClt):
    UserShopDataAddShopOrderClt(builder, shopOrderClt)

def UserShopDataStartShopOrderCltVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartShopOrderCltVector(builder, numElems):
    return UserShopDataStartShopOrderCltVector(builder, numElems)

def UserShopDataAddNeedShopUpdate(builder, needShopUpdate):
    builder.PrependBoolSlot(6, needShopUpdate, 0)

def AddNeedShopUpdate(builder, needShopUpdate):
    UserShopDataAddNeedShopUpdate(builder, needShopUpdate)

def UserShopDataEnd(builder):
    return builder.EndObject()

def End(builder):
    return UserShopDataEnd(builder)
