# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Acpcc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class UserChatHistoryNNpc(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UserChatHistoryNNpc()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsUserChatHistoryNNpc(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # UserChatHistoryNNpc
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # UserChatHistoryNNpc
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserChatHistoryNNpc
    def NNpcTalkLotteryId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserChatHistoryNNpc
    def MentalIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserChatHistoryNNpc
    def LottedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def UserChatHistoryNNpcStart(builder):
    builder.StartObject(4)

def Start(builder):
    UserChatHistoryNNpcStart(builder)

def UserChatHistoryNNpcAddId(builder, id):
    builder.PrependUint32Slot(0, id, 0)

def AddId(builder, id):
    UserChatHistoryNNpcAddId(builder, id)

def UserChatHistoryNNpcAddNNpcTalkLotteryId(builder, nNpcTalkLotteryId):
    builder.PrependUint32Slot(1, nNpcTalkLotteryId, 0)

def AddNNpcTalkLotteryId(builder, nNpcTalkLotteryId):
    UserChatHistoryNNpcAddNNpcTalkLotteryId(builder, nNpcTalkLotteryId)

def UserChatHistoryNNpcAddMentalIndex(builder, mentalIndex):
    builder.PrependInt32Slot(2, mentalIndex, 0)

def AddMentalIndex(builder, mentalIndex):
    UserChatHistoryNNpcAddMentalIndex(builder, mentalIndex)

def UserChatHistoryNNpcAddLottedAt(builder, lottedAt):
    builder.PrependInt64Slot(3, lottedAt, 0)

def AddLottedAt(builder, lottedAt):
    UserChatHistoryNNpcAddLottedAt(builder, lottedAt)

def UserChatHistoryNNpcEnd(builder):
    return builder.EndObject()

def End(builder):
    return UserChatHistoryNNpcEnd(builder)
