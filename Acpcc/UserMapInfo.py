# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Acpcc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class UserMapInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UserMapInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsUserMapInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # UserMapInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # UserMapInfo
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserMapInfo
    def LabelBeforeBonusArea(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # UserMapInfo
    def BonusAreaLotBeginUnix(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # UserMapInfo
    def BonusAreaLotEndUnix(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # UserMapInfo
    def UpdatedEntryCountAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # UserMapInfo
    def Pattern(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserMapInfo
    def MineId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserMapInfo
    def LastLotteryUnix(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # UserMapInfo
    def EntryType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserMapInfo
    def RewardBell(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserMapInfo
    def RewardMaterialAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserMapInfo
    def JewerlyLabelCsvStrings(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # UserMapInfo
    def IsCleared(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # UserMapInfo
    def FriendHelpCountAtDay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserMapInfo
    def TicketEntryCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserMapInfo
    def AcceptHelpCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserMapInfo
    def LastAcceptHelpAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def UserMapInfoStart(builder):
    builder.StartObject(17)

def Start(builder):
    UserMapInfoStart(builder)

def UserMapInfoAddId(builder, id):
    builder.PrependUint32Slot(0, id, 0)

def AddId(builder, id):
    UserMapInfoAddId(builder, id)

def UserMapInfoAddLabelBeforeBonusArea(builder, labelBeforeBonusArea):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(labelBeforeBonusArea), 0)

def AddLabelBeforeBonusArea(builder, labelBeforeBonusArea):
    UserMapInfoAddLabelBeforeBonusArea(builder, labelBeforeBonusArea)

def UserMapInfoAddBonusAreaLotBeginUnix(builder, bonusAreaLotBeginUnix):
    builder.PrependInt64Slot(2, bonusAreaLotBeginUnix, 0)

def AddBonusAreaLotBeginUnix(builder, bonusAreaLotBeginUnix):
    UserMapInfoAddBonusAreaLotBeginUnix(builder, bonusAreaLotBeginUnix)

def UserMapInfoAddBonusAreaLotEndUnix(builder, bonusAreaLotEndUnix):
    builder.PrependInt64Slot(3, bonusAreaLotEndUnix, 0)

def AddBonusAreaLotEndUnix(builder, bonusAreaLotEndUnix):
    UserMapInfoAddBonusAreaLotEndUnix(builder, bonusAreaLotEndUnix)

def UserMapInfoAddUpdatedEntryCountAt(builder, updatedEntryCountAt):
    builder.PrependInt64Slot(4, updatedEntryCountAt, 0)

def AddUpdatedEntryCountAt(builder, updatedEntryCountAt):
    UserMapInfoAddUpdatedEntryCountAt(builder, updatedEntryCountAt)

def UserMapInfoAddPattern(builder, pattern):
    builder.PrependInt32Slot(5, pattern, 0)

def AddPattern(builder, pattern):
    UserMapInfoAddPattern(builder, pattern)

def UserMapInfoAddMineId(builder, mineId):
    builder.PrependInt32Slot(6, mineId, 0)

def AddMineId(builder, mineId):
    UserMapInfoAddMineId(builder, mineId)

def UserMapInfoAddLastLotteryUnix(builder, lastLotteryUnix):
    builder.PrependInt64Slot(7, lastLotteryUnix, 0)

def AddLastLotteryUnix(builder, lastLotteryUnix):
    UserMapInfoAddLastLotteryUnix(builder, lastLotteryUnix)

def UserMapInfoAddEntryType(builder, entryType):
    builder.PrependInt32Slot(8, entryType, 0)

def AddEntryType(builder, entryType):
    UserMapInfoAddEntryType(builder, entryType)

def UserMapInfoAddRewardBell(builder, rewardBell):
    builder.PrependInt32Slot(9, rewardBell, 0)

def AddRewardBell(builder, rewardBell):
    UserMapInfoAddRewardBell(builder, rewardBell)

def UserMapInfoAddRewardMaterialAmount(builder, rewardMaterialAmount):
    builder.PrependInt32Slot(10, rewardMaterialAmount, 0)

def AddRewardMaterialAmount(builder, rewardMaterialAmount):
    UserMapInfoAddRewardMaterialAmount(builder, rewardMaterialAmount)

def UserMapInfoAddJewerlyLabelCsvStrings(builder, jewerlyLabelCsvStrings):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(jewerlyLabelCsvStrings), 0)

def AddJewerlyLabelCsvStrings(builder, jewerlyLabelCsvStrings):
    UserMapInfoAddJewerlyLabelCsvStrings(builder, jewerlyLabelCsvStrings)

def UserMapInfoAddIsCleared(builder, isCleared):
    builder.PrependBoolSlot(12, isCleared, 0)

def AddIsCleared(builder, isCleared):
    UserMapInfoAddIsCleared(builder, isCleared)

def UserMapInfoAddFriendHelpCountAtDay(builder, friendHelpCountAtDay):
    builder.PrependInt32Slot(13, friendHelpCountAtDay, 0)

def AddFriendHelpCountAtDay(builder, friendHelpCountAtDay):
    UserMapInfoAddFriendHelpCountAtDay(builder, friendHelpCountAtDay)

def UserMapInfoAddTicketEntryCount(builder, ticketEntryCount):
    builder.PrependInt32Slot(14, ticketEntryCount, 0)

def AddTicketEntryCount(builder, ticketEntryCount):
    UserMapInfoAddTicketEntryCount(builder, ticketEntryCount)

def UserMapInfoAddAcceptHelpCount(builder, acceptHelpCount):
    builder.PrependInt32Slot(15, acceptHelpCount, 0)

def AddAcceptHelpCount(builder, acceptHelpCount):
    UserMapInfoAddAcceptHelpCount(builder, acceptHelpCount)

def UserMapInfoAddLastAcceptHelpAt(builder, lastAcceptHelpAt):
    builder.PrependInt64Slot(16, lastAcceptHelpAt, 0)

def AddLastAcceptHelpAt(builder, lastAcceptHelpAt):
    UserMapInfoAddLastAcceptHelpAt(builder, lastAcceptHelpAt)

def UserMapInfoEnd(builder):
    return builder.EndObject()

def End(builder):
    return UserMapInfoEnd(builder)
