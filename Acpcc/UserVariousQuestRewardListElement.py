# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Acpcc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class UserVariousQuestRewardListElement(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UserVariousQuestRewardListElement()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsUserVariousQuestRewardListElement(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # UserVariousQuestRewardListElement
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # UserVariousQuestRewardListElement
    def NumericArgument(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserVariousQuestRewardListElement
    def StringArgument(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # UserVariousQuestRewardListElement
    def ChoicesLovePoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserVariousQuestRewardListElement
    def RewardBell(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserVariousQuestRewardListElement
    def RewardList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Acpcc.UserVariousQuestRewardElement import UserVariousQuestRewardElement
            obj = UserVariousQuestRewardElement()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # UserVariousQuestRewardListElement
    def RewardListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # UserVariousQuestRewardListElement
    def RewardListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

def UserVariousQuestRewardListElementStart(builder):
    builder.StartObject(5)

def Start(builder):
    UserVariousQuestRewardListElementStart(builder)

def UserVariousQuestRewardListElementAddNumericArgument(builder, numericArgument):
    builder.PrependInt32Slot(0, numericArgument, 0)

def AddNumericArgument(builder, numericArgument):
    UserVariousQuestRewardListElementAddNumericArgument(builder, numericArgument)

def UserVariousQuestRewardListElementAddStringArgument(builder, stringArgument):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(stringArgument), 0)

def AddStringArgument(builder, stringArgument):
    UserVariousQuestRewardListElementAddStringArgument(builder, stringArgument)

def UserVariousQuestRewardListElementAddChoicesLovePoint(builder, choicesLovePoint):
    builder.PrependInt32Slot(2, choicesLovePoint, 0)

def AddChoicesLovePoint(builder, choicesLovePoint):
    UserVariousQuestRewardListElementAddChoicesLovePoint(builder, choicesLovePoint)

def UserVariousQuestRewardListElementAddRewardBell(builder, rewardBell):
    builder.PrependInt32Slot(3, rewardBell, 0)

def AddRewardBell(builder, rewardBell):
    UserVariousQuestRewardListElementAddRewardBell(builder, rewardBell)

def UserVariousQuestRewardListElementAddRewardList(builder, rewardList):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(rewardList), 0)

def AddRewardList(builder, rewardList):
    UserVariousQuestRewardListElementAddRewardList(builder, rewardList)

def UserVariousQuestRewardListElementStartRewardListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartRewardListVector(builder, numElems):
    return UserVariousQuestRewardListElementStartRewardListVector(builder, numElems)

def UserVariousQuestRewardListElementEnd(builder):
    return builder.EndObject()

def End(builder):
    return UserVariousQuestRewardListElementEnd(builder)
