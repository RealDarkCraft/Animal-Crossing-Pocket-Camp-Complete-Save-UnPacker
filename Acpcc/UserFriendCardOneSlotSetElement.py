# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Acpcc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class UserFriendCardOneSlotSetElement(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UserFriendCardOneSlotSetElement()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsUserFriendCardOneSlotSetElement(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # UserFriendCardOneSlotSetElement
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # UserFriendCardOneSlotSetElement
    def Version(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserFriendCardOneSlotSetElement
    def PlayerId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # UserFriendCardOneSlotSetElement
    def PlayerName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # UserFriendCardOneSlotSetElement
    def PartnerId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserFriendCardOneSlotSetElement
    def Sex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserFriendCardOneSlotSetElement
    def EyeParts(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserFriendCardOneSlotSetElement
    def HairStyle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserFriendCardOneSlotSetElement
    def EyeColorIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserFriendCardOneSlotSetElement
    def HairColorIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserFriendCardOneSlotSetElement
    def SkinColorIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserFriendCardOneSlotSetElement
    def PlayerClothes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # UserFriendCardOneSlotSetElement
    def PlayerClothesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # UserFriendCardOneSlotSetElement
    def PlayerClothesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # UserFriendCardOneSlotSetElement
    def PlayerClothesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

    # UserFriendCardOneSlotSetElement
    def PartnerClothes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # UserFriendCardOneSlotSetElement
    def PartnerClothesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # UserFriendCardOneSlotSetElement
    def PartnerClothesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # UserFriendCardOneSlotSetElement
    def PartnerClothesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        return o == 0

    # UserFriendCardOneSlotSetElement
    def BgColor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserFriendCardOneSlotSetElement
    def Posing(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserFriendCardOneSlotSetElement
    def LastLogin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # UserFriendCardOneSlotSetElement
    def Level(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserFriendCardOneSlotSetElement
    def PlayerMyDesignId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # UserFriendCardOneSlotSetElement
    def PlayerMyDesignIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # UserFriendCardOneSlotSetElement
    def PlayerMyDesignIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        return o == 0

    # UserFriendCardOneSlotSetElement
    def PartnerMyDesignId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # UserFriendCardOneSlotSetElement
    def PartnerMyDesignIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # UserFriendCardOneSlotSetElement
    def PartnerMyDesignIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        return o == 0

def UserFriendCardOneSlotSetElementStart(builder):
    builder.StartObject(18)

def Start(builder):
    UserFriendCardOneSlotSetElementStart(builder)

def UserFriendCardOneSlotSetElementAddVersion(builder, version):
    builder.PrependInt32Slot(0, version, 0)

def AddVersion(builder, version):
    UserFriendCardOneSlotSetElementAddVersion(builder, version)

def UserFriendCardOneSlotSetElementAddPlayerId(builder, playerId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(playerId), 0)

def AddPlayerId(builder, playerId):
    UserFriendCardOneSlotSetElementAddPlayerId(builder, playerId)

def UserFriendCardOneSlotSetElementAddPlayerName(builder, playerName):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(playerName), 0)

def AddPlayerName(builder, playerName):
    UserFriendCardOneSlotSetElementAddPlayerName(builder, playerName)

def UserFriendCardOneSlotSetElementAddPartnerId(builder, partnerId):
    builder.PrependUint32Slot(3, partnerId, 0)

def AddPartnerId(builder, partnerId):
    UserFriendCardOneSlotSetElementAddPartnerId(builder, partnerId)

def UserFriendCardOneSlotSetElementAddSex(builder, sex):
    builder.PrependInt32Slot(4, sex, 0)

def AddSex(builder, sex):
    UserFriendCardOneSlotSetElementAddSex(builder, sex)

def UserFriendCardOneSlotSetElementAddEyeParts(builder, eyeParts):
    builder.PrependInt32Slot(5, eyeParts, 0)

def AddEyeParts(builder, eyeParts):
    UserFriendCardOneSlotSetElementAddEyeParts(builder, eyeParts)

def UserFriendCardOneSlotSetElementAddHairStyle(builder, hairStyle):
    builder.PrependInt32Slot(6, hairStyle, 0)

def AddHairStyle(builder, hairStyle):
    UserFriendCardOneSlotSetElementAddHairStyle(builder, hairStyle)

def UserFriendCardOneSlotSetElementAddEyeColorIndex(builder, eyeColorIndex):
    builder.PrependInt32Slot(7, eyeColorIndex, 0)

def AddEyeColorIndex(builder, eyeColorIndex):
    UserFriendCardOneSlotSetElementAddEyeColorIndex(builder, eyeColorIndex)

def UserFriendCardOneSlotSetElementAddHairColorIndex(builder, hairColorIndex):
    builder.PrependInt32Slot(8, hairColorIndex, 0)

def AddHairColorIndex(builder, hairColorIndex):
    UserFriendCardOneSlotSetElementAddHairColorIndex(builder, hairColorIndex)

def UserFriendCardOneSlotSetElementAddSkinColorIndex(builder, skinColorIndex):
    builder.PrependInt32Slot(9, skinColorIndex, 0)

def AddSkinColorIndex(builder, skinColorIndex):
    UserFriendCardOneSlotSetElementAddSkinColorIndex(builder, skinColorIndex)

def UserFriendCardOneSlotSetElementAddPlayerClothes(builder, playerClothes):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(playerClothes), 0)

def AddPlayerClothes(builder, playerClothes):
    UserFriendCardOneSlotSetElementAddPlayerClothes(builder, playerClothes)

def UserFriendCardOneSlotSetElementStartPlayerClothesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartPlayerClothesVector(builder, numElems):
    return UserFriendCardOneSlotSetElementStartPlayerClothesVector(builder, numElems)

def UserFriendCardOneSlotSetElementAddPartnerClothes(builder, partnerClothes):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(partnerClothes), 0)

def AddPartnerClothes(builder, partnerClothes):
    UserFriendCardOneSlotSetElementAddPartnerClothes(builder, partnerClothes)

def UserFriendCardOneSlotSetElementStartPartnerClothesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartPartnerClothesVector(builder, numElems):
    return UserFriendCardOneSlotSetElementStartPartnerClothesVector(builder, numElems)

def UserFriendCardOneSlotSetElementAddBgColor(builder, bgColor):
    builder.PrependInt32Slot(12, bgColor, 0)

def AddBgColor(builder, bgColor):
    UserFriendCardOneSlotSetElementAddBgColor(builder, bgColor)

def UserFriendCardOneSlotSetElementAddPosing(builder, posing):
    builder.PrependInt32Slot(13, posing, 0)

def AddPosing(builder, posing):
    UserFriendCardOneSlotSetElementAddPosing(builder, posing)

def UserFriendCardOneSlotSetElementAddLastLogin(builder, lastLogin):
    builder.PrependInt64Slot(14, lastLogin, 0)

def AddLastLogin(builder, lastLogin):
    UserFriendCardOneSlotSetElementAddLastLogin(builder, lastLogin)

def UserFriendCardOneSlotSetElementAddLevel(builder, level):
    builder.PrependInt32Slot(15, level, 0)

def AddLevel(builder, level):
    UserFriendCardOneSlotSetElementAddLevel(builder, level)

def UserFriendCardOneSlotSetElementAddPlayerMyDesignId(builder, playerMyDesignId):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(playerMyDesignId), 0)

def AddPlayerMyDesignId(builder, playerMyDesignId):
    UserFriendCardOneSlotSetElementAddPlayerMyDesignId(builder, playerMyDesignId)

def UserFriendCardOneSlotSetElementStartPlayerMyDesignIdVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartPlayerMyDesignIdVector(builder, numElems):
    return UserFriendCardOneSlotSetElementStartPlayerMyDesignIdVector(builder, numElems)

def UserFriendCardOneSlotSetElementAddPartnerMyDesignId(builder, partnerMyDesignId):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(partnerMyDesignId), 0)

def AddPartnerMyDesignId(builder, partnerMyDesignId):
    UserFriendCardOneSlotSetElementAddPartnerMyDesignId(builder, partnerMyDesignId)

def UserFriendCardOneSlotSetElementStartPartnerMyDesignIdVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartPartnerMyDesignIdVector(builder, numElems):
    return UserFriendCardOneSlotSetElementStartPartnerMyDesignIdVector(builder, numElems)

def UserFriendCardOneSlotSetElementEnd(builder):
    return builder.EndObject()

def End(builder):
    return UserFriendCardOneSlotSetElementEnd(builder)
