# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Acpcc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class UserCottageInfoOneSlot(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UserCottageInfoOneSlot()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsUserCottageInfoOneSlot(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # UserCottageInfoOneSlot
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # UserCottageInfoOneSlot
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserCottageInfoOneSlot
    def CottageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserCottageInfoOneSlot
    def CottageSizeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserCottageInfoOneSlot
    def CottageFloorId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserCottageInfoOneSlot
    def CottageLightFlag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # UserCottageInfoOneSlot
    def CottageWindowFlag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def UserCottageInfoOneSlotStart(builder):
    builder.StartObject(6)

def Start(builder):
    UserCottageInfoOneSlotStart(builder)

def UserCottageInfoOneSlotAddId(builder, id):
    builder.PrependUint32Slot(0, id, 0)

def AddId(builder, id):
    UserCottageInfoOneSlotAddId(builder, id)

def UserCottageInfoOneSlotAddCottageId(builder, cottageId):
    builder.PrependInt32Slot(1, cottageId, 0)

def AddCottageId(builder, cottageId):
    UserCottageInfoOneSlotAddCottageId(builder, cottageId)

def UserCottageInfoOneSlotAddCottageSizeId(builder, cottageSizeId):
    builder.PrependInt32Slot(2, cottageSizeId, 0)

def AddCottageSizeId(builder, cottageSizeId):
    UserCottageInfoOneSlotAddCottageSizeId(builder, cottageSizeId)

def UserCottageInfoOneSlotAddCottageFloorId(builder, cottageFloorId):
    builder.PrependInt32Slot(3, cottageFloorId, 0)

def AddCottageFloorId(builder, cottageFloorId):
    UserCottageInfoOneSlotAddCottageFloorId(builder, cottageFloorId)

def UserCottageInfoOneSlotAddCottageLightFlag(builder, cottageLightFlag):
    builder.PrependBoolSlot(4, cottageLightFlag, 0)

def AddCottageLightFlag(builder, cottageLightFlag):
    UserCottageInfoOneSlotAddCottageLightFlag(builder, cottageLightFlag)

def UserCottageInfoOneSlotAddCottageWindowFlag(builder, cottageWindowFlag):
    builder.PrependBoolSlot(5, cottageWindowFlag, 0)

def AddCottageWindowFlag(builder, cottageWindowFlag):
    UserCottageInfoOneSlotAddCottageWindowFlag(builder, cottageWindowFlag)

def UserCottageInfoOneSlotEnd(builder):
    return builder.EndObject()

def End(builder):
    return UserCottageInfoOneSlotEnd(builder)
