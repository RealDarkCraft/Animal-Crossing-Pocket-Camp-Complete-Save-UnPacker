# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Acpcc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class UserQuest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UserQuest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsUserQuest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # UserQuest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # UserQuest
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserQuest
    def Freetalk1stHint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserQuest
    def ResumePlaceLabel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # UserQuest
    def IsCampingcarScene(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # UserQuest
    def ResumeScene(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # UserQuest
    def QuestClearedNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserQuest
    def RewardQuestRankA(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # UserQuest
    def RewardQuestRankAAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # UserQuest
    def RewardQuestRankALength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # UserQuest
    def RewardQuestRankAIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # UserQuest
    def VariousTypeHistory(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # UserQuest
    def VariousTypeHistoryAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # UserQuest
    def VariousTypeHistoryLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # UserQuest
    def VariousTypeHistoryIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

def UserQuestStart(builder):
    builder.StartObject(8)

def Start(builder):
    UserQuestStart(builder)

def UserQuestAddId(builder, id):
    builder.PrependUint32Slot(0, id, 0)

def AddId(builder, id):
    UserQuestAddId(builder, id)

def UserQuestAddFreetalk1stHint(builder, freetalk1stHint):
    builder.PrependInt32Slot(1, freetalk1stHint, 0)

def AddFreetalk1stHint(builder, freetalk1stHint):
    UserQuestAddFreetalk1stHint(builder, freetalk1stHint)

def UserQuestAddResumePlaceLabel(builder, resumePlaceLabel):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(resumePlaceLabel), 0)

def AddResumePlaceLabel(builder, resumePlaceLabel):
    UserQuestAddResumePlaceLabel(builder, resumePlaceLabel)

def UserQuestAddIsCampingcarScene(builder, isCampingcarScene):
    builder.PrependBoolSlot(3, isCampingcarScene, 0)

def AddIsCampingcarScene(builder, isCampingcarScene):
    UserQuestAddIsCampingcarScene(builder, isCampingcarScene)

def UserQuestAddResumeScene(builder, resumeScene):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(resumeScene), 0)

def AddResumeScene(builder, resumeScene):
    UserQuestAddResumeScene(builder, resumeScene)

def UserQuestAddQuestClearedNum(builder, questClearedNum):
    builder.PrependInt32Slot(5, questClearedNum, 0)

def AddQuestClearedNum(builder, questClearedNum):
    UserQuestAddQuestClearedNum(builder, questClearedNum)

def UserQuestAddRewardQuestRankA(builder, rewardQuestRankA):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(rewardQuestRankA), 0)

def AddRewardQuestRankA(builder, rewardQuestRankA):
    UserQuestAddRewardQuestRankA(builder, rewardQuestRankA)

def UserQuestStartRewardQuestRankAVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartRewardQuestRankAVector(builder, numElems):
    return UserQuestStartRewardQuestRankAVector(builder, numElems)

def UserQuestAddVariousTypeHistory(builder, variousTypeHistory):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(variousTypeHistory), 0)

def AddVariousTypeHistory(builder, variousTypeHistory):
    UserQuestAddVariousTypeHistory(builder, variousTypeHistory)

def UserQuestStartVariousTypeHistoryVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartVariousTypeHistoryVector(builder, numElems):
    return UserQuestStartVariousTypeHistoryVector(builder, numElems)

def UserQuestEnd(builder):
    return builder.EndObject()

def End(builder):
    return UserQuestEnd(builder)
