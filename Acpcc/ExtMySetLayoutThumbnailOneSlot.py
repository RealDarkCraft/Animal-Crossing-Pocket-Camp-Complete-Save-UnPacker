# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Acpcc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ExtMySetLayoutThumbnailOneSlot(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ExtMySetLayoutThumbnailOneSlot()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsExtMySetLayoutThumbnailOneSlot(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ExtMySetLayoutThumbnailOneSlot
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ExtMySetLayoutThumbnailOneSlot
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ExtMySetLayoutThumbnailOneSlot
    def MySetId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ExtMySetLayoutThumbnailOneSlot
    def ImageByte(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # ExtMySetLayoutThumbnailOneSlot
    def ImageByteAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # ExtMySetLayoutThumbnailOneSlot
    def ImageByteLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ExtMySetLayoutThumbnailOneSlot
    def ImageByteIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def ExtMySetLayoutThumbnailOneSlotStart(builder):
    builder.StartObject(3)

def Start(builder):
    ExtMySetLayoutThumbnailOneSlotStart(builder)

def ExtMySetLayoutThumbnailOneSlotAddId(builder, id):
    builder.PrependUint32Slot(0, id, 0)

def AddId(builder, id):
    ExtMySetLayoutThumbnailOneSlotAddId(builder, id)

def ExtMySetLayoutThumbnailOneSlotAddMySetId(builder, mySetId):
    builder.PrependInt32Slot(1, mySetId, 0)

def AddMySetId(builder, mySetId):
    ExtMySetLayoutThumbnailOneSlotAddMySetId(builder, mySetId)

def ExtMySetLayoutThumbnailOneSlotAddImageByte(builder, imageByte):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(imageByte), 0)

def AddImageByte(builder, imageByte):
    ExtMySetLayoutThumbnailOneSlotAddImageByte(builder, imageByte)

def ExtMySetLayoutThumbnailOneSlotStartImageByteVector(builder, numElems):
    return builder.StartVector(1, numElems, 1)

def StartImageByteVector(builder, numElems):
    return ExtMySetLayoutThumbnailOneSlotStartImageByteVector(builder, numElems)

def ExtMySetLayoutThumbnailOneSlotEnd(builder):
    return builder.EndObject()

def End(builder):
    return ExtMySetLayoutThumbnailOneSlotEnd(builder)
