# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Acpcc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class UserSystem(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UserSystem()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsUserSystem(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # UserSystem
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # UserSystem
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserSystem
    def Fangate2Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # UserSystem
    def TwitterLink(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # UserSystem
    def FacebookLink(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # UserSystem
    def NewDayUnixTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # UserSystem
    def AppealImageUploadTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # UserSystem
    def LastFootprintCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # UserSystem
    def LastAppealFootCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # UserSystem
    def AppealFromAlbumDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # UserSystem
    def AppealFromAlbumCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # UserSystem
    def AlbumUploadTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # UserSystem
    def AlbumUploadCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

def UserSystemStart(builder):
    builder.StartObject(12)

def Start(builder):
    UserSystemStart(builder)

def UserSystemAddId(builder, id):
    builder.PrependUint32Slot(0, id, 0)

def AddId(builder, id):
    UserSystemAddId(builder, id)

def UserSystemAddFangate2Id(builder, fangate2Id):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(fangate2Id), 0)

def AddFangate2Id(builder, fangate2Id):
    UserSystemAddFangate2Id(builder, fangate2Id)

def UserSystemAddTwitterLink(builder, twitterLink):
    builder.PrependBoolSlot(2, twitterLink, 0)

def AddTwitterLink(builder, twitterLink):
    UserSystemAddTwitterLink(builder, twitterLink)

def UserSystemAddFacebookLink(builder, facebookLink):
    builder.PrependBoolSlot(3, facebookLink, 0)

def AddFacebookLink(builder, facebookLink):
    UserSystemAddFacebookLink(builder, facebookLink)

def UserSystemAddNewDayUnixTime(builder, newDayUnixTime):
    builder.PrependInt64Slot(4, newDayUnixTime, 0)

def AddNewDayUnixTime(builder, newDayUnixTime):
    UserSystemAddNewDayUnixTime(builder, newDayUnixTime)

def UserSystemAddAppealImageUploadTime(builder, appealImageUploadTime):
    builder.PrependInt64Slot(5, appealImageUploadTime, 0)

def AddAppealImageUploadTime(builder, appealImageUploadTime):
    UserSystemAddAppealImageUploadTime(builder, appealImageUploadTime)

def UserSystemAddLastFootprintCount(builder, lastFootprintCount):
    builder.PrependUint64Slot(6, lastFootprintCount, 0)

def AddLastFootprintCount(builder, lastFootprintCount):
    UserSystemAddLastFootprintCount(builder, lastFootprintCount)

def UserSystemAddLastAppealFootCount(builder, lastAppealFootCount):
    builder.PrependUint64Slot(7, lastAppealFootCount, 0)

def AddLastAppealFootCount(builder, lastAppealFootCount):
    UserSystemAddLastAppealFootCount(builder, lastAppealFootCount)

def UserSystemAddAppealFromAlbumDate(builder, appealFromAlbumDate):
    builder.PrependInt64Slot(8, appealFromAlbumDate, 0)

def AddAppealFromAlbumDate(builder, appealFromAlbumDate):
    UserSystemAddAppealFromAlbumDate(builder, appealFromAlbumDate)

def UserSystemAddAppealFromAlbumCount(builder, appealFromAlbumCount):
    builder.PrependUint8Slot(9, appealFromAlbumCount, 0)

def AddAppealFromAlbumCount(builder, appealFromAlbumCount):
    UserSystemAddAppealFromAlbumCount(builder, appealFromAlbumCount)

def UserSystemAddAlbumUploadTime(builder, albumUploadTime):
    builder.PrependInt64Slot(10, albumUploadTime, 0)

def AddAlbumUploadTime(builder, albumUploadTime):
    UserSystemAddAlbumUploadTime(builder, albumUploadTime)

def UserSystemAddAlbumUploadCount(builder, albumUploadCount):
    builder.PrependUint8Slot(11, albumUploadCount, 0)

def AddAlbumUploadCount(builder, albumUploadCount):
    UserSystemAddAlbumUploadCount(builder, albumUploadCount)

def UserSystemEnd(builder):
    return builder.EndObject()

def End(builder):
    return UserSystemEnd(builder)
