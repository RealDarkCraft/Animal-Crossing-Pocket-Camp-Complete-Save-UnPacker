# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Acpcc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class UserProfilePublic(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UserProfilePublic()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsUserProfilePublic(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # UserProfilePublic
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # UserProfilePublic
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserProfilePublic
    def UserName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # UserProfilePublic
    def Sex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserProfilePublic
    def EyeParts(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserProfilePublic
    def EyeColorR(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserProfilePublic
    def EyeColorG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserProfilePublic
    def EyeColorB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserProfilePublic
    def SkinColorR(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserProfilePublic
    def SkinColorG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserProfilePublic
    def SkinColorB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserProfilePublic
    def HairStyle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserProfilePublic
    def HairColorR(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserProfilePublic
    def HairColorG(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserProfilePublic
    def HairColorB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserProfilePublic
    def EyeColorIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserProfilePublic
    def HairColorIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserProfilePublic
    def SkinColorIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserProfilePublic
    def LastLogin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # UserProfilePublic
    def Level(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserProfilePublic
    def IsGardeningTutorialFinished(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # UserProfilePublic
    def EventCampaignId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserProfilePublic
    def EventTotalPoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # UserProfilePublic
    def EventSetToolItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserProfilePublic
    def EventLastItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserProfilePublic
    def EventLastDateTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # UserProfilePublic
    def BazaarFriendsOnlySale(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # UserProfilePublic
    def AppealImagePublic(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # UserProfilePublic
    def IsCottageTutorialFinished(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # UserProfilePublic
    def IsOpenedCottage1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # UserProfilePublic
    def IsOpenedCottage2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # UserProfilePublic
    def CaptureEventKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # UserProfilePublic
    def GardeningQuestAnimalIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # UserProfilePublic
    def GardeningQuestAnimalIdsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # UserProfilePublic
    def GardeningQuestAnimalIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # UserProfilePublic
    def GardeningQuestAnimalIdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        return o == 0

    # UserProfilePublic
    def FurniturePuzzlePlayerRankNo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserProfilePublic
    def BazaarLimitBuyCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserProfilePublic
    def AssistantNpcId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserProfilePublic
    def AssistantWearTopsItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserProfilePublic
    def AssistantWearAcceItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserProfilePublic
    def AssistantWearCapItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserProfilePublic
    def AssistantWearDecoItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserProfilePublic
    def AssistantWearHandItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserProfilePublic
    def AlbumViewableState(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # UserProfilePublic
    def AppealImageDispAddedTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # UserProfilePublic
    def FurnitureAwayState(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # UserProfilePublic
    def DiaryExterior(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserProfilePublic
    def DiaryInterior(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # UserProfilePublic
    def IsOpenedCottage3(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def UserProfilePublicStart(builder):
    builder.StartObject(46)

def Start(builder):
    UserProfilePublicStart(builder)

def UserProfilePublicAddId(builder, id):
    builder.PrependUint32Slot(0, id, 0)

def AddId(builder, id):
    UserProfilePublicAddId(builder, id)

def UserProfilePublicAddUserName(builder, userName):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(userName), 0)

def AddUserName(builder, userName):
    UserProfilePublicAddUserName(builder, userName)

def UserProfilePublicAddSex(builder, sex):
    builder.PrependInt32Slot(2, sex, 0)

def AddSex(builder, sex):
    UserProfilePublicAddSex(builder, sex)

def UserProfilePublicAddEyeParts(builder, eyeParts):
    builder.PrependInt32Slot(3, eyeParts, 0)

def AddEyeParts(builder, eyeParts):
    UserProfilePublicAddEyeParts(builder, eyeParts)

def UserProfilePublicAddEyeColorR(builder, eyeColorR):
    builder.PrependInt32Slot(4, eyeColorR, 0)

def AddEyeColorR(builder, eyeColorR):
    UserProfilePublicAddEyeColorR(builder, eyeColorR)

def UserProfilePublicAddEyeColorG(builder, eyeColorG):
    builder.PrependInt32Slot(5, eyeColorG, 0)

def AddEyeColorG(builder, eyeColorG):
    UserProfilePublicAddEyeColorG(builder, eyeColorG)

def UserProfilePublicAddEyeColorB(builder, eyeColorB):
    builder.PrependInt32Slot(6, eyeColorB, 0)

def AddEyeColorB(builder, eyeColorB):
    UserProfilePublicAddEyeColorB(builder, eyeColorB)

def UserProfilePublicAddSkinColorR(builder, skinColorR):
    builder.PrependInt32Slot(7, skinColorR, 0)

def AddSkinColorR(builder, skinColorR):
    UserProfilePublicAddSkinColorR(builder, skinColorR)

def UserProfilePublicAddSkinColorG(builder, skinColorG):
    builder.PrependInt32Slot(8, skinColorG, 0)

def AddSkinColorG(builder, skinColorG):
    UserProfilePublicAddSkinColorG(builder, skinColorG)

def UserProfilePublicAddSkinColorB(builder, skinColorB):
    builder.PrependInt32Slot(9, skinColorB, 0)

def AddSkinColorB(builder, skinColorB):
    UserProfilePublicAddSkinColorB(builder, skinColorB)

def UserProfilePublicAddHairStyle(builder, hairStyle):
    builder.PrependInt32Slot(10, hairStyle, 0)

def AddHairStyle(builder, hairStyle):
    UserProfilePublicAddHairStyle(builder, hairStyle)

def UserProfilePublicAddHairColorR(builder, hairColorR):
    builder.PrependInt32Slot(11, hairColorR, 0)

def AddHairColorR(builder, hairColorR):
    UserProfilePublicAddHairColorR(builder, hairColorR)

def UserProfilePublicAddHairColorG(builder, hairColorG):
    builder.PrependInt32Slot(12, hairColorG, 0)

def AddHairColorG(builder, hairColorG):
    UserProfilePublicAddHairColorG(builder, hairColorG)

def UserProfilePublicAddHairColorB(builder, hairColorB):
    builder.PrependInt32Slot(13, hairColorB, 0)

def AddHairColorB(builder, hairColorB):
    UserProfilePublicAddHairColorB(builder, hairColorB)

def UserProfilePublicAddEyeColorIndex(builder, eyeColorIndex):
    builder.PrependInt32Slot(14, eyeColorIndex, 0)

def AddEyeColorIndex(builder, eyeColorIndex):
    UserProfilePublicAddEyeColorIndex(builder, eyeColorIndex)

def UserProfilePublicAddHairColorIndex(builder, hairColorIndex):
    builder.PrependInt32Slot(15, hairColorIndex, 0)

def AddHairColorIndex(builder, hairColorIndex):
    UserProfilePublicAddHairColorIndex(builder, hairColorIndex)

def UserProfilePublicAddSkinColorIndex(builder, skinColorIndex):
    builder.PrependInt32Slot(16, skinColorIndex, 0)

def AddSkinColorIndex(builder, skinColorIndex):
    UserProfilePublicAddSkinColorIndex(builder, skinColorIndex)

def UserProfilePublicAddLastLogin(builder, lastLogin):
    builder.PrependInt64Slot(17, lastLogin, 0)

def AddLastLogin(builder, lastLogin):
    UserProfilePublicAddLastLogin(builder, lastLogin)

def UserProfilePublicAddLevel(builder, level):
    builder.PrependInt32Slot(18, level, 0)

def AddLevel(builder, level):
    UserProfilePublicAddLevel(builder, level)

def UserProfilePublicAddIsGardeningTutorialFinished(builder, isGardeningTutorialFinished):
    builder.PrependBoolSlot(19, isGardeningTutorialFinished, 0)

def AddIsGardeningTutorialFinished(builder, isGardeningTutorialFinished):
    UserProfilePublicAddIsGardeningTutorialFinished(builder, isGardeningTutorialFinished)

def UserProfilePublicAddEventCampaignId(builder, eventCampaignId):
    builder.PrependUint32Slot(20, eventCampaignId, 0)

def AddEventCampaignId(builder, eventCampaignId):
    UserProfilePublicAddEventCampaignId(builder, eventCampaignId)

def UserProfilePublicAddEventTotalPoint(builder, eventTotalPoint):
    builder.PrependInt64Slot(21, eventTotalPoint, 0)

def AddEventTotalPoint(builder, eventTotalPoint):
    UserProfilePublicAddEventTotalPoint(builder, eventTotalPoint)

def UserProfilePublicAddEventSetToolItemId(builder, eventSetToolItemId):
    builder.PrependUint32Slot(22, eventSetToolItemId, 0)

def AddEventSetToolItemId(builder, eventSetToolItemId):
    UserProfilePublicAddEventSetToolItemId(builder, eventSetToolItemId)

def UserProfilePublicAddEventLastItemId(builder, eventLastItemId):
    builder.PrependUint32Slot(23, eventLastItemId, 0)

def AddEventLastItemId(builder, eventLastItemId):
    UserProfilePublicAddEventLastItemId(builder, eventLastItemId)

def UserProfilePublicAddEventLastDateTime(builder, eventLastDateTime):
    builder.PrependInt64Slot(24, eventLastDateTime, 0)

def AddEventLastDateTime(builder, eventLastDateTime):
    UserProfilePublicAddEventLastDateTime(builder, eventLastDateTime)

def UserProfilePublicAddBazaarFriendsOnlySale(builder, bazaarFriendsOnlySale):
    builder.PrependBoolSlot(25, bazaarFriendsOnlySale, 0)

def AddBazaarFriendsOnlySale(builder, bazaarFriendsOnlySale):
    UserProfilePublicAddBazaarFriendsOnlySale(builder, bazaarFriendsOnlySale)

def UserProfilePublicAddAppealImagePublic(builder, appealImagePublic):
    builder.PrependBoolSlot(26, appealImagePublic, 0)

def AddAppealImagePublic(builder, appealImagePublic):
    UserProfilePublicAddAppealImagePublic(builder, appealImagePublic)

def UserProfilePublicAddIsCottageTutorialFinished(builder, isCottageTutorialFinished):
    builder.PrependBoolSlot(27, isCottageTutorialFinished, 0)

def AddIsCottageTutorialFinished(builder, isCottageTutorialFinished):
    UserProfilePublicAddIsCottageTutorialFinished(builder, isCottageTutorialFinished)

def UserProfilePublicAddIsOpenedCottage1(builder, isOpenedCottage1):
    builder.PrependBoolSlot(28, isOpenedCottage1, 0)

def AddIsOpenedCottage1(builder, isOpenedCottage1):
    UserProfilePublicAddIsOpenedCottage1(builder, isOpenedCottage1)

def UserProfilePublicAddIsOpenedCottage2(builder, isOpenedCottage2):
    builder.PrependBoolSlot(29, isOpenedCottage2, 0)

def AddIsOpenedCottage2(builder, isOpenedCottage2):
    UserProfilePublicAddIsOpenedCottage2(builder, isOpenedCottage2)

def UserProfilePublicAddCaptureEventKey(builder, captureEventKey):
    builder.PrependUOffsetTRelativeSlot(30, flatbuffers.number_types.UOffsetTFlags.py_type(captureEventKey), 0)

def AddCaptureEventKey(builder, captureEventKey):
    UserProfilePublicAddCaptureEventKey(builder, captureEventKey)

def UserProfilePublicAddGardeningQuestAnimalIds(builder, gardeningQuestAnimalIds):
    builder.PrependUOffsetTRelativeSlot(31, flatbuffers.number_types.UOffsetTFlags.py_type(gardeningQuestAnimalIds), 0)

def AddGardeningQuestAnimalIds(builder, gardeningQuestAnimalIds):
    UserProfilePublicAddGardeningQuestAnimalIds(builder, gardeningQuestAnimalIds)

def UserProfilePublicStartGardeningQuestAnimalIdsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartGardeningQuestAnimalIdsVector(builder, numElems):
    return UserProfilePublicStartGardeningQuestAnimalIdsVector(builder, numElems)

def UserProfilePublicAddFurniturePuzzlePlayerRankNo(builder, furniturePuzzlePlayerRankNo):
    builder.PrependInt32Slot(32, furniturePuzzlePlayerRankNo, 0)

def AddFurniturePuzzlePlayerRankNo(builder, furniturePuzzlePlayerRankNo):
    UserProfilePublicAddFurniturePuzzlePlayerRankNo(builder, furniturePuzzlePlayerRankNo)

def UserProfilePublicAddBazaarLimitBuyCount(builder, bazaarLimitBuyCount):
    builder.PrependInt32Slot(33, bazaarLimitBuyCount, 0)

def AddBazaarLimitBuyCount(builder, bazaarLimitBuyCount):
    UserProfilePublicAddBazaarLimitBuyCount(builder, bazaarLimitBuyCount)

def UserProfilePublicAddAssistantNpcId(builder, assistantNpcId):
    builder.PrependUint32Slot(34, assistantNpcId, 0)

def AddAssistantNpcId(builder, assistantNpcId):
    UserProfilePublicAddAssistantNpcId(builder, assistantNpcId)

def UserProfilePublicAddAssistantWearTopsItemId(builder, assistantWearTopsItemId):
    builder.PrependUint32Slot(35, assistantWearTopsItemId, 0)

def AddAssistantWearTopsItemId(builder, assistantWearTopsItemId):
    UserProfilePublicAddAssistantWearTopsItemId(builder, assistantWearTopsItemId)

def UserProfilePublicAddAssistantWearAcceItemId(builder, assistantWearAcceItemId):
    builder.PrependUint32Slot(36, assistantWearAcceItemId, 0)

def AddAssistantWearAcceItemId(builder, assistantWearAcceItemId):
    UserProfilePublicAddAssistantWearAcceItemId(builder, assistantWearAcceItemId)

def UserProfilePublicAddAssistantWearCapItemId(builder, assistantWearCapItemId):
    builder.PrependUint32Slot(37, assistantWearCapItemId, 0)

def AddAssistantWearCapItemId(builder, assistantWearCapItemId):
    UserProfilePublicAddAssistantWearCapItemId(builder, assistantWearCapItemId)

def UserProfilePublicAddAssistantWearDecoItemId(builder, assistantWearDecoItemId):
    builder.PrependUint32Slot(38, assistantWearDecoItemId, 0)

def AddAssistantWearDecoItemId(builder, assistantWearDecoItemId):
    UserProfilePublicAddAssistantWearDecoItemId(builder, assistantWearDecoItemId)

def UserProfilePublicAddAssistantWearHandItemId(builder, assistantWearHandItemId):
    builder.PrependUint32Slot(39, assistantWearHandItemId, 0)

def AddAssistantWearHandItemId(builder, assistantWearHandItemId):
    UserProfilePublicAddAssistantWearHandItemId(builder, assistantWearHandItemId)

def UserProfilePublicAddAlbumViewableState(builder, albumViewableState):
    builder.PrependUint8Slot(40, albumViewableState, 0)

def AddAlbumViewableState(builder, albumViewableState):
    UserProfilePublicAddAlbumViewableState(builder, albumViewableState)

def UserProfilePublicAddAppealImageDispAddedTime(builder, appealImageDispAddedTime):
    builder.PrependInt64Slot(41, appealImageDispAddedTime, 0)

def AddAppealImageDispAddedTime(builder, appealImageDispAddedTime):
    UserProfilePublicAddAppealImageDispAddedTime(builder, appealImageDispAddedTime)

def UserProfilePublicAddFurnitureAwayState(builder, furnitureAwayState):
    builder.PrependUint8Slot(42, furnitureAwayState, 0)

def AddFurnitureAwayState(builder, furnitureAwayState):
    UserProfilePublicAddFurnitureAwayState(builder, furnitureAwayState)

def UserProfilePublicAddDiaryExterior(builder, diaryExterior):
    builder.PrependUint32Slot(43, diaryExterior, 0)

def AddDiaryExterior(builder, diaryExterior):
    UserProfilePublicAddDiaryExterior(builder, diaryExterior)

def UserProfilePublicAddDiaryInterior(builder, diaryInterior):
    builder.PrependUint8Slot(44, diaryInterior, 0)

def AddDiaryInterior(builder, diaryInterior):
    UserProfilePublicAddDiaryInterior(builder, diaryInterior)

def UserProfilePublicAddIsOpenedCottage3(builder, isOpenedCottage3):
    builder.PrependBoolSlot(45, isOpenedCottage3, 0)

def AddIsOpenedCottage3(builder, isOpenedCottage3):
    UserProfilePublicAddIsOpenedCottage3(builder, isOpenedCottage3)

def UserProfilePublicEnd(builder):
    return builder.EndObject()

def End(builder):
    return UserProfilePublicEnd(builder)
