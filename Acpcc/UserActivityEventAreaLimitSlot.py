# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Acpcc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class UserActivityEventAreaLimitSlot(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UserActivityEventAreaLimitSlot()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsUserActivityEventAreaLimitSlot(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # UserActivityEventAreaLimitSlot
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # UserActivityEventAreaLimitSlot
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserActivityEventAreaLimitSlot
    def CampaignId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserActivityEventAreaLimitSlot
    def AreaLabel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # UserActivityEventAreaLimitSlot
    def GetMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserActivityEventAreaLimitSlot
    def GetCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserActivityEventAreaLimitSlot
    def LastTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def UserActivityEventAreaLimitSlotStart(builder):
    builder.StartObject(6)

def Start(builder):
    UserActivityEventAreaLimitSlotStart(builder)

def UserActivityEventAreaLimitSlotAddId(builder, id):
    builder.PrependUint32Slot(0, id, 0)

def AddId(builder, id):
    UserActivityEventAreaLimitSlotAddId(builder, id)

def UserActivityEventAreaLimitSlotAddCampaignId(builder, campaignId):
    builder.PrependUint32Slot(1, campaignId, 0)

def AddCampaignId(builder, campaignId):
    UserActivityEventAreaLimitSlotAddCampaignId(builder, campaignId)

def UserActivityEventAreaLimitSlotAddAreaLabel(builder, areaLabel):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(areaLabel), 0)

def AddAreaLabel(builder, areaLabel):
    UserActivityEventAreaLimitSlotAddAreaLabel(builder, areaLabel)

def UserActivityEventAreaLimitSlotAddGetMax(builder, getMax):
    builder.PrependInt32Slot(3, getMax, 0)

def AddGetMax(builder, getMax):
    UserActivityEventAreaLimitSlotAddGetMax(builder, getMax)

def UserActivityEventAreaLimitSlotAddGetCount(builder, getCount):
    builder.PrependInt32Slot(4, getCount, 0)

def AddGetCount(builder, getCount):
    UserActivityEventAreaLimitSlotAddGetCount(builder, getCount)

def UserActivityEventAreaLimitSlotAddLastTime(builder, lastTime):
    builder.PrependInt64Slot(5, lastTime, 0)

def AddLastTime(builder, lastTime):
    UserActivityEventAreaLimitSlotAddLastTime(builder, lastTime)

def UserActivityEventAreaLimitSlotEnd(builder):
    return builder.EndObject()

def End(builder):
    return UserActivityEventAreaLimitSlotEnd(builder)
