# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Acpcc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class UserMySetLayoutOneSlot(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UserMySetLayoutOneSlot()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsUserMySetLayoutOneSlot(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # UserMySetLayoutOneSlot
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # UserMySetLayoutOneSlot
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserMySetLayoutOneSlot
    def MySetId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserMySetLayoutOneSlot
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # UserMySetLayoutOneSlot
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserMySetLayoutOneSlot
    def LightFlag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # UserMySetLayoutOneSlot
    def WindowFlag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # UserMySetLayoutOneSlot
    def LargeObjList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # UserMySetLayoutOneSlot
    def LargeObjListAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # UserMySetLayoutOneSlot
    def LargeObjListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # UserMySetLayoutOneSlot
    def LargeObjListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # UserMySetLayoutOneSlot
    def TerrainList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # UserMySetLayoutOneSlot
    def TerrainListAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # UserMySetLayoutOneSlot
    def TerrainListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # UserMySetLayoutOneSlot
    def TerrainListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # UserMySetLayoutOneSlot
    def LargeObjLevelList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # UserMySetLayoutOneSlot
    def LargeObjLevelListAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # UserMySetLayoutOneSlot
    def LargeObjLevelListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # UserMySetLayoutOneSlot
    def LargeObjLevelListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

def UserMySetLayoutOneSlotStart(builder):
    builder.StartObject(9)

def Start(builder):
    UserMySetLayoutOneSlotStart(builder)

def UserMySetLayoutOneSlotAddId(builder, id):
    builder.PrependUint32Slot(0, id, 0)

def AddId(builder, id):
    UserMySetLayoutOneSlotAddId(builder, id)

def UserMySetLayoutOneSlotAddMySetId(builder, mySetId):
    builder.PrependInt32Slot(1, mySetId, 0)

def AddMySetId(builder, mySetId):
    UserMySetLayoutOneSlotAddMySetId(builder, mySetId)

def UserMySetLayoutOneSlotAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    UserMySetLayoutOneSlotAddName(builder, name)

def UserMySetLayoutOneSlotAddType(builder, type):
    builder.PrependUint32Slot(3, type, 0)

def AddType(builder, type):
    UserMySetLayoutOneSlotAddType(builder, type)

def UserMySetLayoutOneSlotAddLightFlag(builder, lightFlag):
    builder.PrependBoolSlot(4, lightFlag, 0)

def AddLightFlag(builder, lightFlag):
    UserMySetLayoutOneSlotAddLightFlag(builder, lightFlag)

def UserMySetLayoutOneSlotAddWindowFlag(builder, windowFlag):
    builder.PrependBoolSlot(5, windowFlag, 0)

def AddWindowFlag(builder, windowFlag):
    UserMySetLayoutOneSlotAddWindowFlag(builder, windowFlag)

def UserMySetLayoutOneSlotAddLargeObjList(builder, largeObjList):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(largeObjList), 0)

def AddLargeObjList(builder, largeObjList):
    UserMySetLayoutOneSlotAddLargeObjList(builder, largeObjList)

def UserMySetLayoutOneSlotStartLargeObjListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartLargeObjListVector(builder, numElems):
    return UserMySetLayoutOneSlotStartLargeObjListVector(builder, numElems)

def UserMySetLayoutOneSlotAddTerrainList(builder, terrainList):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(terrainList), 0)

def AddTerrainList(builder, terrainList):
    UserMySetLayoutOneSlotAddTerrainList(builder, terrainList)

def UserMySetLayoutOneSlotStartTerrainListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTerrainListVector(builder, numElems):
    return UserMySetLayoutOneSlotStartTerrainListVector(builder, numElems)

def UserMySetLayoutOneSlotAddLargeObjLevelList(builder, largeObjLevelList):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(largeObjLevelList), 0)

def AddLargeObjLevelList(builder, largeObjLevelList):
    UserMySetLayoutOneSlotAddLargeObjLevelList(builder, largeObjLevelList)

def UserMySetLayoutOneSlotStartLargeObjLevelListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartLargeObjLevelListVector(builder, numElems):
    return UserMySetLayoutOneSlotStartLargeObjLevelListVector(builder, numElems)

def UserMySetLayoutOneSlotEnd(builder):
    return builder.EndObject()

def End(builder):
    return UserMySetLayoutOneSlotEnd(builder)
