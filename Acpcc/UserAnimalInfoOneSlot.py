# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Acpcc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class UserAnimalInfoOneSlot(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UserAnimalInfoOneSlot()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsUserAnimalInfoOneSlot(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # UserAnimalInfoOneSlot
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # UserAnimalInfoOneSlot
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserAnimalInfoOneSlot
    def NpcLabel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # UserAnimalInfoOneSlot
    def Love(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserAnimalInfoOneSlot
    def IsTalkedToday(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # UserAnimalInfoOneSlot
    def IsJustTalked(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # UserAnimalInfoOneSlot
    def BazaaredUnix(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # UserAnimalInfoOneSlot
    def IsReqDone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # UserAnimalInfoOneSlot
    def ChattedNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserAnimalInfoOneSlot
    def ClearTotalNumS(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserAnimalInfoOneSlot
    def NpcBazaarRefusedUnix(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # UserAnimalInfoOneSlot
    def IsInviteShown(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # UserAnimalInfoOneSlot
    def SummonUnix(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # UserAnimalInfoOneSlot
    def SummonSpot(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # UserAnimalInfoOneSlot
    def IsUseTicket(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # UserAnimalInfoOneSlot
    def Seen(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # UserAnimalInfoOneSlot
    def GenerateNumRankS(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserAnimalInfoOneSlot
    def ReleaseBegin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # UserAnimalInfoOneSlot
    def ReleaseEnd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # UserAnimalInfoOneSlot
    def DefaultCloth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # UserAnimalInfoOneSlot
    def ItemLotteryFlagList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # UserAnimalInfoOneSlot
    def ItemLotteryFlagListAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # UserAnimalInfoOneSlot
    def ItemLotteryFlagListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # UserAnimalInfoOneSlot
    def ItemLotteryFlagListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        return o == 0

    # UserAnimalInfoOneSlot
    def AppearDateTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # UserAnimalInfoOneSlot
    def DoneBirthdayTalk(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # UserAnimalInfoOneSlot
    def IsBromideEvent(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # UserAnimalInfoOneSlot
    def BirthdayCheckUnix(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # UserAnimalInfoOneSlot
    def LoveLevelCap(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserAnimalInfoOneSlot
    def TodayQuestOkawariCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserAnimalInfoOneSlot
    def IsJustTalkedMyCamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # UserAnimalInfoOneSlot
    def IsCampsiteReqDone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # UserAnimalInfoOneSlot
    def IsNewInvite(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def UserAnimalInfoOneSlotStart(builder):
    builder.StartObject(29)

def Start(builder):
    UserAnimalInfoOneSlotStart(builder)

def UserAnimalInfoOneSlotAddId(builder, id):
    builder.PrependUint32Slot(0, id, 0)

def AddId(builder, id):
    UserAnimalInfoOneSlotAddId(builder, id)

def UserAnimalInfoOneSlotAddNpcLabel(builder, npcLabel):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(npcLabel), 0)

def AddNpcLabel(builder, npcLabel):
    UserAnimalInfoOneSlotAddNpcLabel(builder, npcLabel)

def UserAnimalInfoOneSlotAddLove(builder, love):
    builder.PrependInt32Slot(2, love, 0)

def AddLove(builder, love):
    UserAnimalInfoOneSlotAddLove(builder, love)

def UserAnimalInfoOneSlotAddIsTalkedToday(builder, isTalkedToday):
    builder.PrependBoolSlot(3, isTalkedToday, 0)

def AddIsTalkedToday(builder, isTalkedToday):
    UserAnimalInfoOneSlotAddIsTalkedToday(builder, isTalkedToday)

def UserAnimalInfoOneSlotAddIsJustTalked(builder, isJustTalked):
    builder.PrependBoolSlot(4, isJustTalked, 0)

def AddIsJustTalked(builder, isJustTalked):
    UserAnimalInfoOneSlotAddIsJustTalked(builder, isJustTalked)

def UserAnimalInfoOneSlotAddBazaaredUnix(builder, bazaaredUnix):
    builder.PrependInt64Slot(5, bazaaredUnix, 0)

def AddBazaaredUnix(builder, bazaaredUnix):
    UserAnimalInfoOneSlotAddBazaaredUnix(builder, bazaaredUnix)

def UserAnimalInfoOneSlotAddIsReqDone(builder, isReqDone):
    builder.PrependBoolSlot(6, isReqDone, 0)

def AddIsReqDone(builder, isReqDone):
    UserAnimalInfoOneSlotAddIsReqDone(builder, isReqDone)

def UserAnimalInfoOneSlotAddChattedNum(builder, chattedNum):
    builder.PrependInt32Slot(7, chattedNum, 0)

def AddChattedNum(builder, chattedNum):
    UserAnimalInfoOneSlotAddChattedNum(builder, chattedNum)

def UserAnimalInfoOneSlotAddClearTotalNumS(builder, clearTotalNumS):
    builder.PrependInt32Slot(8, clearTotalNumS, 0)

def AddClearTotalNumS(builder, clearTotalNumS):
    UserAnimalInfoOneSlotAddClearTotalNumS(builder, clearTotalNumS)

def UserAnimalInfoOneSlotAddNpcBazaarRefusedUnix(builder, npcBazaarRefusedUnix):
    builder.PrependInt64Slot(9, npcBazaarRefusedUnix, 0)

def AddNpcBazaarRefusedUnix(builder, npcBazaarRefusedUnix):
    UserAnimalInfoOneSlotAddNpcBazaarRefusedUnix(builder, npcBazaarRefusedUnix)

def UserAnimalInfoOneSlotAddIsInviteShown(builder, isInviteShown):
    builder.PrependBoolSlot(10, isInviteShown, 0)

def AddIsInviteShown(builder, isInviteShown):
    UserAnimalInfoOneSlotAddIsInviteShown(builder, isInviteShown)

def UserAnimalInfoOneSlotAddSummonUnix(builder, summonUnix):
    builder.PrependInt64Slot(11, summonUnix, 0)

def AddSummonUnix(builder, summonUnix):
    UserAnimalInfoOneSlotAddSummonUnix(builder, summonUnix)

def UserAnimalInfoOneSlotAddSummonSpot(builder, summonSpot):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(summonSpot), 0)

def AddSummonSpot(builder, summonSpot):
    UserAnimalInfoOneSlotAddSummonSpot(builder, summonSpot)

def UserAnimalInfoOneSlotAddIsUseTicket(builder, isUseTicket):
    builder.PrependBoolSlot(13, isUseTicket, 0)

def AddIsUseTicket(builder, isUseTicket):
    UserAnimalInfoOneSlotAddIsUseTicket(builder, isUseTicket)

def UserAnimalInfoOneSlotAddSeen(builder, seen):
    builder.PrependBoolSlot(14, seen, 0)

def AddSeen(builder, seen):
    UserAnimalInfoOneSlotAddSeen(builder, seen)

def UserAnimalInfoOneSlotAddGenerateNumRankS(builder, generateNumRankS):
    builder.PrependInt32Slot(15, generateNumRankS, 0)

def AddGenerateNumRankS(builder, generateNumRankS):
    UserAnimalInfoOneSlotAddGenerateNumRankS(builder, generateNumRankS)

def UserAnimalInfoOneSlotAddReleaseBegin(builder, releaseBegin):
    builder.PrependInt64Slot(16, releaseBegin, 0)

def AddReleaseBegin(builder, releaseBegin):
    UserAnimalInfoOneSlotAddReleaseBegin(builder, releaseBegin)

def UserAnimalInfoOneSlotAddReleaseEnd(builder, releaseEnd):
    builder.PrependInt64Slot(17, releaseEnd, 0)

def AddReleaseEnd(builder, releaseEnd):
    UserAnimalInfoOneSlotAddReleaseEnd(builder, releaseEnd)

def UserAnimalInfoOneSlotAddDefaultCloth(builder, defaultCloth):
    builder.PrependBoolSlot(18, defaultCloth, 0)

def AddDefaultCloth(builder, defaultCloth):
    UserAnimalInfoOneSlotAddDefaultCloth(builder, defaultCloth)

def UserAnimalInfoOneSlotAddItemLotteryFlagList(builder, itemLotteryFlagList):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(itemLotteryFlagList), 0)

def AddItemLotteryFlagList(builder, itemLotteryFlagList):
    UserAnimalInfoOneSlotAddItemLotteryFlagList(builder, itemLotteryFlagList)

def UserAnimalInfoOneSlotStartItemLotteryFlagListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartItemLotteryFlagListVector(builder, numElems):
    return UserAnimalInfoOneSlotStartItemLotteryFlagListVector(builder, numElems)

def UserAnimalInfoOneSlotAddAppearDateTime(builder, appearDateTime):
    builder.PrependInt64Slot(20, appearDateTime, 0)

def AddAppearDateTime(builder, appearDateTime):
    UserAnimalInfoOneSlotAddAppearDateTime(builder, appearDateTime)

def UserAnimalInfoOneSlotAddDoneBirthdayTalk(builder, doneBirthdayTalk):
    builder.PrependBoolSlot(21, doneBirthdayTalk, 0)

def AddDoneBirthdayTalk(builder, doneBirthdayTalk):
    UserAnimalInfoOneSlotAddDoneBirthdayTalk(builder, doneBirthdayTalk)

def UserAnimalInfoOneSlotAddIsBromideEvent(builder, isBromideEvent):
    builder.PrependBoolSlot(22, isBromideEvent, 0)

def AddIsBromideEvent(builder, isBromideEvent):
    UserAnimalInfoOneSlotAddIsBromideEvent(builder, isBromideEvent)

def UserAnimalInfoOneSlotAddBirthdayCheckUnix(builder, birthdayCheckUnix):
    builder.PrependInt64Slot(23, birthdayCheckUnix, 0)

def AddBirthdayCheckUnix(builder, birthdayCheckUnix):
    UserAnimalInfoOneSlotAddBirthdayCheckUnix(builder, birthdayCheckUnix)

def UserAnimalInfoOneSlotAddLoveLevelCap(builder, loveLevelCap):
    builder.PrependInt32Slot(24, loveLevelCap, 0)

def AddLoveLevelCap(builder, loveLevelCap):
    UserAnimalInfoOneSlotAddLoveLevelCap(builder, loveLevelCap)

def UserAnimalInfoOneSlotAddTodayQuestOkawariCount(builder, todayQuestOkawariCount):
    builder.PrependInt32Slot(25, todayQuestOkawariCount, 0)

def AddTodayQuestOkawariCount(builder, todayQuestOkawariCount):
    UserAnimalInfoOneSlotAddTodayQuestOkawariCount(builder, todayQuestOkawariCount)

def UserAnimalInfoOneSlotAddIsJustTalkedMyCamp(builder, isJustTalkedMyCamp):
    builder.PrependBoolSlot(26, isJustTalkedMyCamp, 0)

def AddIsJustTalkedMyCamp(builder, isJustTalkedMyCamp):
    UserAnimalInfoOneSlotAddIsJustTalkedMyCamp(builder, isJustTalkedMyCamp)

def UserAnimalInfoOneSlotAddIsCampsiteReqDone(builder, isCampsiteReqDone):
    builder.PrependBoolSlot(27, isCampsiteReqDone, 0)

def AddIsCampsiteReqDone(builder, isCampsiteReqDone):
    UserAnimalInfoOneSlotAddIsCampsiteReqDone(builder, isCampsiteReqDone)

def UserAnimalInfoOneSlotAddIsNewInvite(builder, isNewInvite):
    builder.PrependBoolSlot(28, isNewInvite, 0)

def AddIsNewInvite(builder, isNewInvite):
    UserAnimalInfoOneSlotAddIsNewInvite(builder, isNewInvite)

def UserAnimalInfoOneSlotEnd(builder):
    return builder.EndObject()

def End(builder):
    return UserAnimalInfoOneSlotEnd(builder)
