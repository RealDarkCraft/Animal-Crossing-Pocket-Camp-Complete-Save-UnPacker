# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Acpcc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class UserDealer(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UserDealer()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsUserDealer(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # UserDealer
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # UserDealer
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserDealer
    def FlagList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # UserDealer
    def FlagListAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # UserDealer
    def FlagListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # UserDealer
    def FlagListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # UserDealer
    def NewIdList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # UserDealer
    def NewIdListAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # UserDealer
    def NewIdListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # UserDealer
    def NewIdListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # UserDealer
    def TodaySpUpdate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # UserDealer
    def TodaySpLabelList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # UserDealer
    def TodaySpLabelListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # UserDealer
    def TodaySpLabelListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

def UserDealerStart(builder):
    builder.StartObject(5)

def Start(builder):
    UserDealerStart(builder)

def UserDealerAddId(builder, id):
    builder.PrependUint32Slot(0, id, 0)

def AddId(builder, id):
    UserDealerAddId(builder, id)

def UserDealerAddFlagList(builder, flagList):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(flagList), 0)

def AddFlagList(builder, flagList):
    UserDealerAddFlagList(builder, flagList)

def UserDealerStartFlagListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartFlagListVector(builder, numElems):
    return UserDealerStartFlagListVector(builder, numElems)

def UserDealerAddNewIdList(builder, newIdList):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(newIdList), 0)

def AddNewIdList(builder, newIdList):
    UserDealerAddNewIdList(builder, newIdList)

def UserDealerStartNewIdListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartNewIdListVector(builder, numElems):
    return UserDealerStartNewIdListVector(builder, numElems)

def UserDealerAddTodaySpUpdate(builder, todaySpUpdate):
    builder.PrependBoolSlot(3, todaySpUpdate, 0)

def AddTodaySpUpdate(builder, todaySpUpdate):
    UserDealerAddTodaySpUpdate(builder, todaySpUpdate)

def UserDealerAddTodaySpLabelList(builder, todaySpLabelList):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(todaySpLabelList), 0)

def AddTodaySpLabelList(builder, todaySpLabelList):
    UserDealerAddTodaySpLabelList(builder, todaySpLabelList)

def UserDealerStartTodaySpLabelListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTodaySpLabelListVector(builder, numElems):
    return UserDealerStartTodaySpLabelListVector(builder, numElems)

def UserDealerEnd(builder):
    return builder.EndObject()

def End(builder):
    return UserDealerEnd(builder)
