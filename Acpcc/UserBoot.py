# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Acpcc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class UserBoot(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UserBoot()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsUserBoot(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # UserBoot
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # UserBoot
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserBoot
    def DownloadedAssetVersionIdentifer(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # UserBoot
    def DownloadedStep(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserBoot
    def BellByMinigame(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserBoot
    def AgreedEulaMajorVersion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserBoot
    def AgreedEulaMinorVersion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserBoot
    def FlagDataRepairing(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # UserBoot
    def FlagNaPlayerSwitching(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # UserBoot
    def FlagValidSave(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # UserBoot
    def IsPlatformServiceLoginCanceled(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # UserBoot
    def LastPlayUnixTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # UserBoot
    def LastSyncServerUnixTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # UserBoot
    def LastUploadUnixTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def UserBootStart(builder):
    builder.StartObject(13)

def Start(builder):
    UserBootStart(builder)

def UserBootAddId(builder, id):
    builder.PrependUint32Slot(0, id, 0)

def AddId(builder, id):
    UserBootAddId(builder, id)

def UserBootAddDownloadedAssetVersionIdentifer(builder, downloadedAssetVersionIdentifer):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(downloadedAssetVersionIdentifer), 0)

def AddDownloadedAssetVersionIdentifer(builder, downloadedAssetVersionIdentifer):
    UserBootAddDownloadedAssetVersionIdentifer(builder, downloadedAssetVersionIdentifer)

def UserBootAddDownloadedStep(builder, downloadedStep):
    builder.PrependInt32Slot(2, downloadedStep, 0)

def AddDownloadedStep(builder, downloadedStep):
    UserBootAddDownloadedStep(builder, downloadedStep)

def UserBootAddBellByMinigame(builder, bellByMinigame):
    builder.PrependUint32Slot(3, bellByMinigame, 0)

def AddBellByMinigame(builder, bellByMinigame):
    UserBootAddBellByMinigame(builder, bellByMinigame)

def UserBootAddAgreedEulaMajorVersion(builder, agreedEulaMajorVersion):
    builder.PrependUint32Slot(4, agreedEulaMajorVersion, 0)

def AddAgreedEulaMajorVersion(builder, agreedEulaMajorVersion):
    UserBootAddAgreedEulaMajorVersion(builder, agreedEulaMajorVersion)

def UserBootAddAgreedEulaMinorVersion(builder, agreedEulaMinorVersion):
    builder.PrependUint32Slot(5, agreedEulaMinorVersion, 0)

def AddAgreedEulaMinorVersion(builder, agreedEulaMinorVersion):
    UserBootAddAgreedEulaMinorVersion(builder, agreedEulaMinorVersion)

def UserBootAddFlagDataRepairing(builder, flagDataRepairing):
    builder.PrependBoolSlot(6, flagDataRepairing, 0)

def AddFlagDataRepairing(builder, flagDataRepairing):
    UserBootAddFlagDataRepairing(builder, flagDataRepairing)

def UserBootAddFlagNaPlayerSwitching(builder, flagNaPlayerSwitching):
    builder.PrependBoolSlot(7, flagNaPlayerSwitching, 0)

def AddFlagNaPlayerSwitching(builder, flagNaPlayerSwitching):
    UserBootAddFlagNaPlayerSwitching(builder, flagNaPlayerSwitching)

def UserBootAddFlagValidSave(builder, flagValidSave):
    builder.PrependBoolSlot(8, flagValidSave, 0)

def AddFlagValidSave(builder, flagValidSave):
    UserBootAddFlagValidSave(builder, flagValidSave)

def UserBootAddIsPlatformServiceLoginCanceled(builder, isPlatformServiceLoginCanceled):
    builder.PrependBoolSlot(9, isPlatformServiceLoginCanceled, 0)

def AddIsPlatformServiceLoginCanceled(builder, isPlatformServiceLoginCanceled):
    UserBootAddIsPlatformServiceLoginCanceled(builder, isPlatformServiceLoginCanceled)

def UserBootAddLastPlayUnixTime(builder, lastPlayUnixTime):
    builder.PrependInt64Slot(10, lastPlayUnixTime, 0)

def AddLastPlayUnixTime(builder, lastPlayUnixTime):
    UserBootAddLastPlayUnixTime(builder, lastPlayUnixTime)

def UserBootAddLastSyncServerUnixTime(builder, lastSyncServerUnixTime):
    builder.PrependInt64Slot(11, lastSyncServerUnixTime, 0)

def AddLastSyncServerUnixTime(builder, lastSyncServerUnixTime):
    UserBootAddLastSyncServerUnixTime(builder, lastSyncServerUnixTime)

def UserBootAddLastUploadUnixTime(builder, lastUploadUnixTime):
    builder.PrependInt64Slot(12, lastUploadUnixTime, 0)

def AddLastUploadUnixTime(builder, lastUploadUnixTime):
    UserBootAddLastUploadUnixTime(builder, lastUploadUnixTime)

def UserBootEnd(builder):
    return builder.EndObject()

def End(builder):
    return UserBootEnd(builder)
