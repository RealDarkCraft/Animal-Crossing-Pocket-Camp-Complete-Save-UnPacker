# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Acpcc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class UserMyCampObjectOneSlot(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UserMyCampObjectOneSlot()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsUserMyCampObjectOneSlot(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # UserMyCampObjectOneSlot
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # UserMyCampObjectOneSlot
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserMyCampObjectOneSlot
    def ItemLabel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # UserMyCampObjectOneSlot
    def Level(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserMyCampObjectOneSlot
    def PositionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserMyCampObjectOneSlot
    def SetDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # UserMyCampObjectOneSlot
    def RemainingTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # UserMyCampObjectOneSlot
    def BonusType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def UserMyCampObjectOneSlotStart(builder):
    builder.StartObject(7)

def Start(builder):
    UserMyCampObjectOneSlotStart(builder)

def UserMyCampObjectOneSlotAddId(builder, id):
    builder.PrependUint32Slot(0, id, 0)

def AddId(builder, id):
    UserMyCampObjectOneSlotAddId(builder, id)

def UserMyCampObjectOneSlotAddItemLabel(builder, itemLabel):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(itemLabel), 0)

def AddItemLabel(builder, itemLabel):
    UserMyCampObjectOneSlotAddItemLabel(builder, itemLabel)

def UserMyCampObjectOneSlotAddLevel(builder, level):
    builder.PrependInt32Slot(2, level, 0)

def AddLevel(builder, level):
    UserMyCampObjectOneSlotAddLevel(builder, level)

def UserMyCampObjectOneSlotAddPositionId(builder, positionId):
    builder.PrependInt32Slot(3, positionId, 0)

def AddPositionId(builder, positionId):
    UserMyCampObjectOneSlotAddPositionId(builder, positionId)

def UserMyCampObjectOneSlotAddSetDate(builder, setDate):
    builder.PrependInt64Slot(4, setDate, 0)

def AddSetDate(builder, setDate):
    UserMyCampObjectOneSlotAddSetDate(builder, setDate)

def UserMyCampObjectOneSlotAddRemainingTime(builder, remainingTime):
    builder.PrependInt64Slot(5, remainingTime, 0)

def AddRemainingTime(builder, remainingTime):
    UserMyCampObjectOneSlotAddRemainingTime(builder, remainingTime)

def UserMyCampObjectOneSlotAddBonusType(builder, bonusType):
    builder.PrependInt32Slot(6, bonusType, 0)

def AddBonusType(builder, bonusType):
    UserMyCampObjectOneSlotAddBonusType(builder, bonusType)

def UserMyCampObjectOneSlotEnd(builder):
    return builder.EndObject()

def End(builder):
    return UserMyCampObjectOneSlotEnd(builder)
