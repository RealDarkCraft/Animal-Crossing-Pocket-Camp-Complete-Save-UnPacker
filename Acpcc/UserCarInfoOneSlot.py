# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Acpcc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class UserCarInfoOneSlot(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UserCarInfoOneSlot()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsUserCarInfoOneSlot(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # UserCarInfoOneSlot
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # UserCarInfoOneSlot
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserCarInfoOneSlot
    def CarId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserCarInfoOneSlot
    def CarSizeIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserCarInfoOneSlot
    def CarName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # UserCarInfoOneSlot
    def CarTypeLabel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # UserCarInfoOneSlot
    def ColorARed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserCarInfoOneSlot
    def ColorAGreen(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserCarInfoOneSlot
    def ColorABlue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserCarInfoOneSlot
    def ColorBRed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserCarInfoOneSlot
    def ColorBGreen(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserCarInfoOneSlot
    def ColorBBlue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserCarInfoOneSlot
    def CarState(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserCarInfoOneSlot
    def IsLightInCarList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # UserCarInfoOneSlot
    def IsLightInCarListAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # UserCarInfoOneSlot
    def IsLightInCarListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # UserCarInfoOneSlot
    def IsLightInCarListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        return o == 0

def UserCarInfoOneSlotStart(builder):
    builder.StartObject(13)

def Start(builder):
    UserCarInfoOneSlotStart(builder)

def UserCarInfoOneSlotAddId(builder, id):
    builder.PrependUint32Slot(0, id, 0)

def AddId(builder, id):
    UserCarInfoOneSlotAddId(builder, id)

def UserCarInfoOneSlotAddCarId(builder, carId):
    builder.PrependInt32Slot(1, carId, 0)

def AddCarId(builder, carId):
    UserCarInfoOneSlotAddCarId(builder, carId)

def UserCarInfoOneSlotAddCarSizeIndex(builder, carSizeIndex):
    builder.PrependInt32Slot(2, carSizeIndex, 0)

def AddCarSizeIndex(builder, carSizeIndex):
    UserCarInfoOneSlotAddCarSizeIndex(builder, carSizeIndex)

def UserCarInfoOneSlotAddCarName(builder, carName):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(carName), 0)

def AddCarName(builder, carName):
    UserCarInfoOneSlotAddCarName(builder, carName)

def UserCarInfoOneSlotAddCarTypeLabel(builder, carTypeLabel):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(carTypeLabel), 0)

def AddCarTypeLabel(builder, carTypeLabel):
    UserCarInfoOneSlotAddCarTypeLabel(builder, carTypeLabel)

def UserCarInfoOneSlotAddColorARed(builder, colorARed):
    builder.PrependInt32Slot(5, colorARed, 0)

def AddColorARed(builder, colorARed):
    UserCarInfoOneSlotAddColorARed(builder, colorARed)

def UserCarInfoOneSlotAddColorAGreen(builder, colorAGreen):
    builder.PrependInt32Slot(6, colorAGreen, 0)

def AddColorAGreen(builder, colorAGreen):
    UserCarInfoOneSlotAddColorAGreen(builder, colorAGreen)

def UserCarInfoOneSlotAddColorABlue(builder, colorABlue):
    builder.PrependInt32Slot(7, colorABlue, 0)

def AddColorABlue(builder, colorABlue):
    UserCarInfoOneSlotAddColorABlue(builder, colorABlue)

def UserCarInfoOneSlotAddColorBRed(builder, colorBRed):
    builder.PrependInt32Slot(8, colorBRed, 0)

def AddColorBRed(builder, colorBRed):
    UserCarInfoOneSlotAddColorBRed(builder, colorBRed)

def UserCarInfoOneSlotAddColorBGreen(builder, colorBGreen):
    builder.PrependInt32Slot(9, colorBGreen, 0)

def AddColorBGreen(builder, colorBGreen):
    UserCarInfoOneSlotAddColorBGreen(builder, colorBGreen)

def UserCarInfoOneSlotAddColorBBlue(builder, colorBBlue):
    builder.PrependInt32Slot(10, colorBBlue, 0)

def AddColorBBlue(builder, colorBBlue):
    UserCarInfoOneSlotAddColorBBlue(builder, colorBBlue)

def UserCarInfoOneSlotAddCarState(builder, carState):
    builder.PrependInt32Slot(11, carState, 0)

def AddCarState(builder, carState):
    UserCarInfoOneSlotAddCarState(builder, carState)

def UserCarInfoOneSlotAddIsLightInCarList(builder, isLightInCarList):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(isLightInCarList), 0)

def AddIsLightInCarList(builder, isLightInCarList):
    UserCarInfoOneSlotAddIsLightInCarList(builder, isLightInCarList)

def UserCarInfoOneSlotStartIsLightInCarListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartIsLightInCarListVector(builder, numElems):
    return UserCarInfoOneSlotStartIsLightInCarListVector(builder, numElems)

def UserCarInfoOneSlotEnd(builder):
    return builder.EndObject()

def End(builder):
    return UserCarInfoOneSlotEnd(builder)
