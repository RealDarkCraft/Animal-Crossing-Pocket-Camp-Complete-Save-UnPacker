# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Acpcc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class UserCaptureEvent(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UserCaptureEvent()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsUserCaptureEvent(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # UserCaptureEvent
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # UserCaptureEvent
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserCaptureEvent
    def EventKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # UserCaptureEvent
    def EnteredAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # UserCaptureEvent
    def TutorialStatus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserCaptureEvent
    def ExitedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # UserCaptureEvent
    def IsCleaned(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # UserCaptureEvent
    def LatestWaterOtherAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # UserCaptureEvent
    def WaterOtherPlayers(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # UserCaptureEvent
    def WaterOtherPlayersLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # UserCaptureEvent
    def WaterOtherPlayersIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # UserCaptureEvent
    def IsSendAnimalTutorialEnded(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # UserCaptureEvent
    def AllQuestClearTalkStatus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def UserCaptureEventStart(builder):
    builder.StartObject(10)

def Start(builder):
    UserCaptureEventStart(builder)

def UserCaptureEventAddId(builder, id):
    builder.PrependUint32Slot(0, id, 0)

def AddId(builder, id):
    UserCaptureEventAddId(builder, id)

def UserCaptureEventAddEventKey(builder, eventKey):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(eventKey), 0)

def AddEventKey(builder, eventKey):
    UserCaptureEventAddEventKey(builder, eventKey)

def UserCaptureEventAddEnteredAt(builder, enteredAt):
    builder.PrependInt64Slot(2, enteredAt, 0)

def AddEnteredAt(builder, enteredAt):
    UserCaptureEventAddEnteredAt(builder, enteredAt)

def UserCaptureEventAddTutorialStatus(builder, tutorialStatus):
    builder.PrependInt32Slot(3, tutorialStatus, 0)

def AddTutorialStatus(builder, tutorialStatus):
    UserCaptureEventAddTutorialStatus(builder, tutorialStatus)

def UserCaptureEventAddExitedAt(builder, exitedAt):
    builder.PrependInt64Slot(4, exitedAt, 0)

def AddExitedAt(builder, exitedAt):
    UserCaptureEventAddExitedAt(builder, exitedAt)

def UserCaptureEventAddIsCleaned(builder, isCleaned):
    builder.PrependBoolSlot(5, isCleaned, 0)

def AddIsCleaned(builder, isCleaned):
    UserCaptureEventAddIsCleaned(builder, isCleaned)

def UserCaptureEventAddLatestWaterOtherAt(builder, latestWaterOtherAt):
    builder.PrependInt64Slot(6, latestWaterOtherAt, 0)

def AddLatestWaterOtherAt(builder, latestWaterOtherAt):
    UserCaptureEventAddLatestWaterOtherAt(builder, latestWaterOtherAt)

def UserCaptureEventAddWaterOtherPlayers(builder, waterOtherPlayers):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(waterOtherPlayers), 0)

def AddWaterOtherPlayers(builder, waterOtherPlayers):
    UserCaptureEventAddWaterOtherPlayers(builder, waterOtherPlayers)

def UserCaptureEventStartWaterOtherPlayersVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartWaterOtherPlayersVector(builder, numElems):
    return UserCaptureEventStartWaterOtherPlayersVector(builder, numElems)

def UserCaptureEventAddIsSendAnimalTutorialEnded(builder, isSendAnimalTutorialEnded):
    builder.PrependBoolSlot(8, isSendAnimalTutorialEnded, 0)

def AddIsSendAnimalTutorialEnded(builder, isSendAnimalTutorialEnded):
    UserCaptureEventAddIsSendAnimalTutorialEnded(builder, isSendAnimalTutorialEnded)

def UserCaptureEventAddAllQuestClearTalkStatus(builder, allQuestClearTalkStatus):
    builder.PrependInt32Slot(9, allQuestClearTalkStatus, 0)

def AddAllQuestClearTalkStatus(builder, allQuestClearTalkStatus):
    UserCaptureEventAddAllQuestClearTalkStatus(builder, allQuestClearTalkStatus)

def UserCaptureEventEnd(builder):
    return builder.EndObject()

def End(builder):
    return UserCaptureEventEnd(builder)
