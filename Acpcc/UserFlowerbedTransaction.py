# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Acpcc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class UserFlowerbedTransaction(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UserFlowerbedTransaction()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsUserFlowerbedTransaction(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # UserFlowerbedTransaction
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # UserFlowerbedTransaction
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserFlowerbedTransaction
    def HarvestTransactionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # UserFlowerbedTransaction
    def TransactionType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserFlowerbedTransaction
    def TargetPlayerId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # UserFlowerbedTransaction
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # UserFlowerbedTransaction
    def UpdatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # UserFlowerbedTransaction
    def TargetFlowerbeds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Acpcc.FlowerbedTransactionTarget import FlowerbedTransactionTarget
            obj = FlowerbedTransactionTarget()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # UserFlowerbedTransaction
    def TargetFlowerbedsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # UserFlowerbedTransaction
    def TargetFlowerbedsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # UserFlowerbedTransaction
    def HandledBreedHistory(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # UserFlowerbedTransaction
    def UpdatedHandledBreedHistoryAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # UserFlowerbedTransaction
    def GiveByHandledBreedHistory(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def UserFlowerbedTransactionStart(builder):
    builder.StartObject(10)

def Start(builder):
    UserFlowerbedTransactionStart(builder)

def UserFlowerbedTransactionAddId(builder, id):
    builder.PrependUint32Slot(0, id, 0)

def AddId(builder, id):
    UserFlowerbedTransactionAddId(builder, id)

def UserFlowerbedTransactionAddHarvestTransactionId(builder, harvestTransactionId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(harvestTransactionId), 0)

def AddHarvestTransactionId(builder, harvestTransactionId):
    UserFlowerbedTransactionAddHarvestTransactionId(builder, harvestTransactionId)

def UserFlowerbedTransactionAddTransactionType(builder, transactionType):
    builder.PrependInt32Slot(2, transactionType, 0)

def AddTransactionType(builder, transactionType):
    UserFlowerbedTransactionAddTransactionType(builder, transactionType)

def UserFlowerbedTransactionAddTargetPlayerId(builder, targetPlayerId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(targetPlayerId), 0)

def AddTargetPlayerId(builder, targetPlayerId):
    UserFlowerbedTransactionAddTargetPlayerId(builder, targetPlayerId)

def UserFlowerbedTransactionAddCreatedAt(builder, createdAt):
    builder.PrependInt64Slot(4, createdAt, 0)

def AddCreatedAt(builder, createdAt):
    UserFlowerbedTransactionAddCreatedAt(builder, createdAt)

def UserFlowerbedTransactionAddUpdatedAt(builder, updatedAt):
    builder.PrependInt64Slot(5, updatedAt, 0)

def AddUpdatedAt(builder, updatedAt):
    UserFlowerbedTransactionAddUpdatedAt(builder, updatedAt)

def UserFlowerbedTransactionAddTargetFlowerbeds(builder, targetFlowerbeds):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(targetFlowerbeds), 0)

def AddTargetFlowerbeds(builder, targetFlowerbeds):
    UserFlowerbedTransactionAddTargetFlowerbeds(builder, targetFlowerbeds)

def UserFlowerbedTransactionStartTargetFlowerbedsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTargetFlowerbedsVector(builder, numElems):
    return UserFlowerbedTransactionStartTargetFlowerbedsVector(builder, numElems)

def UserFlowerbedTransactionAddHandledBreedHistory(builder, handledBreedHistory):
    builder.PrependUint64Slot(7, handledBreedHistory, 0)

def AddHandledBreedHistory(builder, handledBreedHistory):
    UserFlowerbedTransactionAddHandledBreedHistory(builder, handledBreedHistory)

def UserFlowerbedTransactionAddUpdatedHandledBreedHistoryAt(builder, updatedHandledBreedHistoryAt):
    builder.PrependInt64Slot(8, updatedHandledBreedHistoryAt, 0)

def AddUpdatedHandledBreedHistoryAt(builder, updatedHandledBreedHistoryAt):
    UserFlowerbedTransactionAddUpdatedHandledBreedHistoryAt(builder, updatedHandledBreedHistoryAt)

def UserFlowerbedTransactionAddGiveByHandledBreedHistory(builder, giveByHandledBreedHistory):
    builder.PrependInt32Slot(9, giveByHandledBreedHistory, 0)

def AddGiveByHandledBreedHistory(builder, giveByHandledBreedHistory):
    UserFlowerbedTransactionAddGiveByHandledBreedHistory(builder, giveByHandledBreedHistory)

def UserFlowerbedTransactionEnd(builder):
    return builder.EndObject()

def End(builder):
    return UserFlowerbedTransactionEnd(builder)
