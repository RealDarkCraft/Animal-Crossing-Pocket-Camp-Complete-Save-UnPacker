# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Acpcc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class UserOfflineFlowerbedOneSlot(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UserOfflineFlowerbedOneSlot()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsUserOfflineFlowerbedOneSlot(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # UserOfflineFlowerbedOneSlot
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # UserOfflineFlowerbedOneSlot
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserOfflineFlowerbedOneSlot
    def SequentialId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserOfflineFlowerbedOneSlot
    def FlowerbedId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserOfflineFlowerbedOneSlot
    def PlayerId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # UserOfflineFlowerbedOneSlot
    def PlantType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserOfflineFlowerbedOneSlot
    def SecToBud(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserOfflineFlowerbedOneSlot
    def SecToHaveBranch(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserOfflineFlowerbedOneSlot
    def SecToComplete(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserOfflineFlowerbedOneSlot
    def SecToBeDry(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserOfflineFlowerbedOneSlot
    def SecToBeWithered(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserOfflineFlowerbedOneSlot
    def SeedKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # UserOfflineFlowerbedOneSlot
    def CropKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # UserOfflineFlowerbedOneSlot
    def AnimalKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # UserOfflineFlowerbedOneSlot
    def AnimalCatchEventKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # UserOfflineFlowerbedOneSlot
    def SeedPlantedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # UserOfflineFlowerbedOneSlot
    def WateredAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # UserOfflineFlowerbedOneSlot
    def PastGrewSec(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # UserOfflineFlowerbedOneSlot
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # UserOfflineFlowerbedOneSlot
    def UpdatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # UserOfflineFlowerbedOneSlot
    def GeneKey1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # UserOfflineFlowerbedOneSlot
    def GeneKey2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def UserOfflineFlowerbedOneSlotStart(builder):
    builder.StartObject(21)

def Start(builder):
    UserOfflineFlowerbedOneSlotStart(builder)

def UserOfflineFlowerbedOneSlotAddId(builder, id):
    builder.PrependUint32Slot(0, id, 0)

def AddId(builder, id):
    UserOfflineFlowerbedOneSlotAddId(builder, id)

def UserOfflineFlowerbedOneSlotAddSequentialId(builder, sequentialId):
    builder.PrependInt32Slot(1, sequentialId, 0)

def AddSequentialId(builder, sequentialId):
    UserOfflineFlowerbedOneSlotAddSequentialId(builder, sequentialId)

def UserOfflineFlowerbedOneSlotAddFlowerbedId(builder, flowerbedId):
    builder.PrependUint32Slot(2, flowerbedId, 0)

def AddFlowerbedId(builder, flowerbedId):
    UserOfflineFlowerbedOneSlotAddFlowerbedId(builder, flowerbedId)

def UserOfflineFlowerbedOneSlotAddPlayerId(builder, playerId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(playerId), 0)

def AddPlayerId(builder, playerId):
    UserOfflineFlowerbedOneSlotAddPlayerId(builder, playerId)

def UserOfflineFlowerbedOneSlotAddPlantType(builder, plantType):
    builder.PrependUint32Slot(4, plantType, 0)

def AddPlantType(builder, plantType):
    UserOfflineFlowerbedOneSlotAddPlantType(builder, plantType)

def UserOfflineFlowerbedOneSlotAddSecToBud(builder, secToBud):
    builder.PrependUint32Slot(5, secToBud, 0)

def AddSecToBud(builder, secToBud):
    UserOfflineFlowerbedOneSlotAddSecToBud(builder, secToBud)

def UserOfflineFlowerbedOneSlotAddSecToHaveBranch(builder, secToHaveBranch):
    builder.PrependUint32Slot(6, secToHaveBranch, 0)

def AddSecToHaveBranch(builder, secToHaveBranch):
    UserOfflineFlowerbedOneSlotAddSecToHaveBranch(builder, secToHaveBranch)

def UserOfflineFlowerbedOneSlotAddSecToComplete(builder, secToComplete):
    builder.PrependUint32Slot(7, secToComplete, 0)

def AddSecToComplete(builder, secToComplete):
    UserOfflineFlowerbedOneSlotAddSecToComplete(builder, secToComplete)

def UserOfflineFlowerbedOneSlotAddSecToBeDry(builder, secToBeDry):
    builder.PrependUint32Slot(8, secToBeDry, 0)

def AddSecToBeDry(builder, secToBeDry):
    UserOfflineFlowerbedOneSlotAddSecToBeDry(builder, secToBeDry)

def UserOfflineFlowerbedOneSlotAddSecToBeWithered(builder, secToBeWithered):
    builder.PrependUint32Slot(9, secToBeWithered, 0)

def AddSecToBeWithered(builder, secToBeWithered):
    UserOfflineFlowerbedOneSlotAddSecToBeWithered(builder, secToBeWithered)

def UserOfflineFlowerbedOneSlotAddSeedKey(builder, seedKey):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(seedKey), 0)

def AddSeedKey(builder, seedKey):
    UserOfflineFlowerbedOneSlotAddSeedKey(builder, seedKey)

def UserOfflineFlowerbedOneSlotAddCropKey(builder, cropKey):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(cropKey), 0)

def AddCropKey(builder, cropKey):
    UserOfflineFlowerbedOneSlotAddCropKey(builder, cropKey)

def UserOfflineFlowerbedOneSlotAddAnimalKey(builder, animalKey):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(animalKey), 0)

def AddAnimalKey(builder, animalKey):
    UserOfflineFlowerbedOneSlotAddAnimalKey(builder, animalKey)

def UserOfflineFlowerbedOneSlotAddAnimalCatchEventKey(builder, animalCatchEventKey):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(animalCatchEventKey), 0)

def AddAnimalCatchEventKey(builder, animalCatchEventKey):
    UserOfflineFlowerbedOneSlotAddAnimalCatchEventKey(builder, animalCatchEventKey)

def UserOfflineFlowerbedOneSlotAddSeedPlantedAt(builder, seedPlantedAt):
    builder.PrependInt64Slot(14, seedPlantedAt, 0)

def AddSeedPlantedAt(builder, seedPlantedAt):
    UserOfflineFlowerbedOneSlotAddSeedPlantedAt(builder, seedPlantedAt)

def UserOfflineFlowerbedOneSlotAddWateredAt(builder, wateredAt):
    builder.PrependInt64Slot(15, wateredAt, 0)

def AddWateredAt(builder, wateredAt):
    UserOfflineFlowerbedOneSlotAddWateredAt(builder, wateredAt)

def UserOfflineFlowerbedOneSlotAddPastGrewSec(builder, pastGrewSec):
    builder.PrependInt64Slot(16, pastGrewSec, 0)

def AddPastGrewSec(builder, pastGrewSec):
    UserOfflineFlowerbedOneSlotAddPastGrewSec(builder, pastGrewSec)

def UserOfflineFlowerbedOneSlotAddCreatedAt(builder, createdAt):
    builder.PrependInt64Slot(17, createdAt, 0)

def AddCreatedAt(builder, createdAt):
    UserOfflineFlowerbedOneSlotAddCreatedAt(builder, createdAt)

def UserOfflineFlowerbedOneSlotAddUpdatedAt(builder, updatedAt):
    builder.PrependInt64Slot(18, updatedAt, 0)

def AddUpdatedAt(builder, updatedAt):
    UserOfflineFlowerbedOneSlotAddUpdatedAt(builder, updatedAt)

def UserOfflineFlowerbedOneSlotAddGeneKey1(builder, geneKey1):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(geneKey1), 0)

def AddGeneKey1(builder, geneKey1):
    UserOfflineFlowerbedOneSlotAddGeneKey1(builder, geneKey1)

def UserOfflineFlowerbedOneSlotAddGeneKey2(builder, geneKey2):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(geneKey2), 0)

def AddGeneKey2(builder, geneKey2):
    UserOfflineFlowerbedOneSlotAddGeneKey2(builder, geneKey2)

def UserOfflineFlowerbedOneSlotEnd(builder):
    return builder.EndObject()

def End(builder):
    return UserOfflineFlowerbedOneSlotEnd(builder)
