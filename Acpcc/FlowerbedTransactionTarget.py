# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Acpcc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class FlowerbedTransactionTarget(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FlowerbedTransactionTarget()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFlowerbedTransactionTarget(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # FlowerbedTransactionTarget
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FlowerbedTransactionTarget
    def SequentialId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FlowerbedTransactionTarget
    def PlantKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FlowerbedTransactionTarget
    def Gene1Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FlowerbedTransactionTarget
    def Gene2Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FlowerbedTransactionTarget
    def AnimalKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def FlowerbedTransactionTargetStart(builder):
    builder.StartObject(5)

def Start(builder):
    FlowerbedTransactionTargetStart(builder)

def FlowerbedTransactionTargetAddSequentialId(builder, sequentialId):
    builder.PrependUint32Slot(0, sequentialId, 0)

def AddSequentialId(builder, sequentialId):
    FlowerbedTransactionTargetAddSequentialId(builder, sequentialId)

def FlowerbedTransactionTargetAddPlantKey(builder, plantKey):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(plantKey), 0)

def AddPlantKey(builder, plantKey):
    FlowerbedTransactionTargetAddPlantKey(builder, plantKey)

def FlowerbedTransactionTargetAddGene1Key(builder, gene1Key):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(gene1Key), 0)

def AddGene1Key(builder, gene1Key):
    FlowerbedTransactionTargetAddGene1Key(builder, gene1Key)

def FlowerbedTransactionTargetAddGene2Key(builder, gene2Key):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(gene2Key), 0)

def AddGene2Key(builder, gene2Key):
    FlowerbedTransactionTargetAddGene2Key(builder, gene2Key)

def FlowerbedTransactionTargetAddAnimalKey(builder, animalKey):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(animalKey), 0)

def AddAnimalKey(builder, animalKey):
    FlowerbedTransactionTargetAddAnimalKey(builder, animalKey)

def FlowerbedTransactionTargetEnd(builder):
    return builder.EndObject()

def End(builder):
    return FlowerbedTransactionTargetEnd(builder)
