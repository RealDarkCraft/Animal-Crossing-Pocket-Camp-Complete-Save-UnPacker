# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Acpcc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class UserCraftFtrClothNowWorkOneSlot(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UserCraftFtrClothNowWorkOneSlot()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsUserCraftFtrClothNowWorkOneSlot(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # UserCraftFtrClothNowWorkOneSlot
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # UserCraftFtrClothNowWorkOneSlot
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserCraftFtrClothNowWorkOneSlot
    def Label(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # UserCraftFtrClothNowWorkOneSlot
    def CompleteDate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # UserCraftFtrClothNowWorkOneSlot
    def Index(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserCraftFtrClothNowWorkOneSlot
    def ItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserCraftFtrClothNowWorkOneSlot
    def RecipeTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserCraftFtrClothNowWorkOneSlot
    def BonusType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserCraftFtrClothNowWorkOneSlot
    def PeddlerId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def UserCraftFtrClothNowWorkOneSlotStart(builder):
    builder.StartObject(8)

def Start(builder):
    UserCraftFtrClothNowWorkOneSlotStart(builder)

def UserCraftFtrClothNowWorkOneSlotAddId(builder, id):
    builder.PrependUint32Slot(0, id, 0)

def AddId(builder, id):
    UserCraftFtrClothNowWorkOneSlotAddId(builder, id)

def UserCraftFtrClothNowWorkOneSlotAddLabel(builder, label):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(label), 0)

def AddLabel(builder, label):
    UserCraftFtrClothNowWorkOneSlotAddLabel(builder, label)

def UserCraftFtrClothNowWorkOneSlotAddCompleteDate(builder, completeDate):
    builder.PrependInt64Slot(2, completeDate, 0)

def AddCompleteDate(builder, completeDate):
    UserCraftFtrClothNowWorkOneSlotAddCompleteDate(builder, completeDate)

def UserCraftFtrClothNowWorkOneSlotAddIndex(builder, index):
    builder.PrependInt32Slot(3, index, 0)

def AddIndex(builder, index):
    UserCraftFtrClothNowWorkOneSlotAddIndex(builder, index)

def UserCraftFtrClothNowWorkOneSlotAddItemId(builder, itemId):
    builder.PrependUint32Slot(4, itemId, 0)

def AddItemId(builder, itemId):
    UserCraftFtrClothNowWorkOneSlotAddItemId(builder, itemId)

def UserCraftFtrClothNowWorkOneSlotAddRecipeTime(builder, recipeTime):
    builder.PrependInt32Slot(5, recipeTime, 0)

def AddRecipeTime(builder, recipeTime):
    UserCraftFtrClothNowWorkOneSlotAddRecipeTime(builder, recipeTime)

def UserCraftFtrClothNowWorkOneSlotAddBonusType(builder, bonusType):
    builder.PrependInt32Slot(6, bonusType, 0)

def AddBonusType(builder, bonusType):
    UserCraftFtrClothNowWorkOneSlotAddBonusType(builder, bonusType)

def UserCraftFtrClothNowWorkOneSlotAddPeddlerId(builder, peddlerId):
    builder.PrependUint32Slot(7, peddlerId, 0)

def AddPeddlerId(builder, peddlerId):
    UserCraftFtrClothNowWorkOneSlotAddPeddlerId(builder, peddlerId)

def UserCraftFtrClothNowWorkOneSlotEnd(builder):
    return builder.EndObject()

def End(builder):
    return UserCraftFtrClothNowWorkOneSlotEnd(builder)
