# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Acpcc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class UserSeasonEvent(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UserSeasonEvent()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsUserSeasonEvent(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # UserSeasonEvent
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # UserSeasonEvent
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserSeasonEvent
    def EntryCampaignId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # UserSeasonEvent
    def Progress(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserSeasonEvent
    def TargetItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserSeasonEvent
    def FlowchartProgress(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserSeasonEvent
    def IsSeenOpeningDialog(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # UserSeasonEvent
    def LastDialogOpenTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # UserSeasonEvent
    def TargetItemGetNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def UserSeasonEventStart(builder):
    builder.StartObject(8)

def Start(builder):
    UserSeasonEventStart(builder)

def UserSeasonEventAddId(builder, id):
    builder.PrependUint32Slot(0, id, 0)

def AddId(builder, id):
    UserSeasonEventAddId(builder, id)

def UserSeasonEventAddEntryCampaignId(builder, entryCampaignId):
    builder.PrependInt64Slot(1, entryCampaignId, 0)

def AddEntryCampaignId(builder, entryCampaignId):
    UserSeasonEventAddEntryCampaignId(builder, entryCampaignId)

def UserSeasonEventAddProgress(builder, progress):
    builder.PrependInt32Slot(2, progress, 0)

def AddProgress(builder, progress):
    UserSeasonEventAddProgress(builder, progress)

def UserSeasonEventAddTargetItemId(builder, targetItemId):
    builder.PrependUint32Slot(3, targetItemId, 0)

def AddTargetItemId(builder, targetItemId):
    UserSeasonEventAddTargetItemId(builder, targetItemId)

def UserSeasonEventAddFlowchartProgress(builder, flowchartProgress):
    builder.PrependInt32Slot(4, flowchartProgress, 0)

def AddFlowchartProgress(builder, flowchartProgress):
    UserSeasonEventAddFlowchartProgress(builder, flowchartProgress)

def UserSeasonEventAddIsSeenOpeningDialog(builder, isSeenOpeningDialog):
    builder.PrependBoolSlot(5, isSeenOpeningDialog, 0)

def AddIsSeenOpeningDialog(builder, isSeenOpeningDialog):
    UserSeasonEventAddIsSeenOpeningDialog(builder, isSeenOpeningDialog)

def UserSeasonEventAddLastDialogOpenTime(builder, lastDialogOpenTime):
    builder.PrependInt64Slot(6, lastDialogOpenTime, 0)

def AddLastDialogOpenTime(builder, lastDialogOpenTime):
    UserSeasonEventAddLastDialogOpenTime(builder, lastDialogOpenTime)

def UserSeasonEventAddTargetItemGetNum(builder, targetItemGetNum):
    builder.PrependInt32Slot(7, targetItemGetNum, 0)

def AddTargetItemGetNum(builder, targetItemGetNum):
    UserSeasonEventAddTargetItemGetNum(builder, targetItemGetNum)

def UserSeasonEventEnd(builder):
    return builder.EndObject()

def End(builder):
    return UserSeasonEventEnd(builder)
