# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Acpcc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class UserFortuneCookieAnalysisTradeSetElement(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UserFortuneCookieAnalysisTradeSetElement()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsUserFortuneCookieAnalysisTradeSetElement(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # UserFortuneCookieAnalysisTradeSetElement
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # UserFortuneCookieAnalysisTradeSetElement
    def SerialNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserFortuneCookieAnalysisTradeSetElement
    def PrizeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserFortuneCookieAnalysisTradeSetElement
    def Time(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def UserFortuneCookieAnalysisTradeSetElementStart(builder):
    builder.StartObject(3)

def Start(builder):
    UserFortuneCookieAnalysisTradeSetElementStart(builder)

def UserFortuneCookieAnalysisTradeSetElementAddSerialNumber(builder, serialNumber):
    builder.PrependUint32Slot(0, serialNumber, 0)

def AddSerialNumber(builder, serialNumber):
    UserFortuneCookieAnalysisTradeSetElementAddSerialNumber(builder, serialNumber)

def UserFortuneCookieAnalysisTradeSetElementAddPrizeId(builder, prizeId):
    builder.PrependUint32Slot(1, prizeId, 0)

def AddPrizeId(builder, prizeId):
    UserFortuneCookieAnalysisTradeSetElementAddPrizeId(builder, prizeId)

def UserFortuneCookieAnalysisTradeSetElementAddTime(builder, time):
    builder.PrependInt64Slot(2, time, 0)

def AddTime(builder, time):
    UserFortuneCookieAnalysisTradeSetElementAddTime(builder, time)

def UserFortuneCookieAnalysisTradeSetElementEnd(builder):
    return builder.EndObject()

def End(builder):
    return UserFortuneCookieAnalysisTradeSetElementEnd(builder)
