# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Acpcc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class UserTutorial(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UserTutorial()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsUserTutorial(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # UserTutorial
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # UserTutorial
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserTutorial
    def TravelManuals(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # UserTutorial
    def TravelManualsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # UserTutorial
    def TravelManualsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # UserTutorial
    def TravelManualsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # UserTutorial
    def TutorialProgress(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserTutorial
    def SelectedNpcLabel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # UserTutorial
    def FirstEvent(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # UserTutorial
    def FirstEventLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # UserTutorial
    def FirstEventIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # UserTutorial
    def CottageTutorialFlag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # UserTutorial
    def IsAdventureTutorialEnd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def UserTutorialStart(builder):
    builder.StartObject(7)

def Start(builder):
    UserTutorialStart(builder)

def UserTutorialAddId(builder, id):
    builder.PrependUint32Slot(0, id, 0)

def AddId(builder, id):
    UserTutorialAddId(builder, id)

def UserTutorialAddTravelManuals(builder, travelManuals):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(travelManuals), 0)

def AddTravelManuals(builder, travelManuals):
    UserTutorialAddTravelManuals(builder, travelManuals)

def UserTutorialStartTravelManualsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTravelManualsVector(builder, numElems):
    return UserTutorialStartTravelManualsVector(builder, numElems)

def UserTutorialAddTutorialProgress(builder, tutorialProgress):
    builder.PrependInt32Slot(2, tutorialProgress, 0)

def AddTutorialProgress(builder, tutorialProgress):
    UserTutorialAddTutorialProgress(builder, tutorialProgress)

def UserTutorialAddSelectedNpcLabel(builder, selectedNpcLabel):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(selectedNpcLabel), 0)

def AddSelectedNpcLabel(builder, selectedNpcLabel):
    UserTutorialAddSelectedNpcLabel(builder, selectedNpcLabel)

def UserTutorialAddFirstEvent(builder, firstEvent):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(firstEvent), 0)

def AddFirstEvent(builder, firstEvent):
    UserTutorialAddFirstEvent(builder, firstEvent)

def UserTutorialStartFirstEventVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartFirstEventVector(builder, numElems):
    return UserTutorialStartFirstEventVector(builder, numElems)

def UserTutorialAddCottageTutorialFlag(builder, cottageTutorialFlag):
    builder.PrependBoolSlot(5, cottageTutorialFlag, 0)

def AddCottageTutorialFlag(builder, cottageTutorialFlag):
    UserTutorialAddCottageTutorialFlag(builder, cottageTutorialFlag)

def UserTutorialAddIsAdventureTutorialEnd(builder, isAdventureTutorialEnd):
    builder.PrependBoolSlot(6, isAdventureTutorialEnd, 0)

def AddIsAdventureTutorialEnd(builder, isAdventureTutorialEnd):
    UserTutorialAddIsAdventureTutorialEnd(builder, isAdventureTutorialEnd)

def UserTutorialEnd(builder):
    return builder.EndObject()

def End(builder):
    return UserTutorialEnd(builder)
