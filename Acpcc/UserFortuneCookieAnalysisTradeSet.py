# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Acpcc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class UserFortuneCookieAnalysisTradeSet(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UserFortuneCookieAnalysisTradeSet()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsUserFortuneCookieAnalysisTradeSet(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # UserFortuneCookieAnalysisTradeSet
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # UserFortuneCookieAnalysisTradeSet
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserFortuneCookieAnalysisTradeSet
    def TotalCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserFortuneCookieAnalysisTradeSet
    def TotalConsume(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserFortuneCookieAnalysisTradeSet
    def BaseYear(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # UserFortuneCookieAnalysisTradeSet
    def BaseMonth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # UserFortuneCookieAnalysisTradeSet
    def MonthCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserFortuneCookieAnalysisTradeSet
    def MonthConsume(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserFortuneCookieAnalysisTradeSet
    def PreviousCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserFortuneCookieAnalysisTradeSet
    def PreviousConsume(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserFortuneCookieAnalysisTradeSet
    def Elements(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Acpcc.UserFortuneCookieAnalysisTradeSetElement import UserFortuneCookieAnalysisTradeSetElement
            obj = UserFortuneCookieAnalysisTradeSetElement()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # UserFortuneCookieAnalysisTradeSet
    def ElementsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # UserFortuneCookieAnalysisTradeSet
    def ElementsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

def UserFortuneCookieAnalysisTradeSetStart(builder):
    builder.StartObject(10)

def Start(builder):
    UserFortuneCookieAnalysisTradeSetStart(builder)

def UserFortuneCookieAnalysisTradeSetAddId(builder, id):
    builder.PrependUint32Slot(0, id, 0)

def AddId(builder, id):
    UserFortuneCookieAnalysisTradeSetAddId(builder, id)

def UserFortuneCookieAnalysisTradeSetAddTotalCount(builder, totalCount):
    builder.PrependUint32Slot(1, totalCount, 0)

def AddTotalCount(builder, totalCount):
    UserFortuneCookieAnalysisTradeSetAddTotalCount(builder, totalCount)

def UserFortuneCookieAnalysisTradeSetAddTotalConsume(builder, totalConsume):
    builder.PrependUint32Slot(2, totalConsume, 0)

def AddTotalConsume(builder, totalConsume):
    UserFortuneCookieAnalysisTradeSetAddTotalConsume(builder, totalConsume)

def UserFortuneCookieAnalysisTradeSetAddBaseYear(builder, baseYear):
    builder.PrependUint8Slot(3, baseYear, 0)

def AddBaseYear(builder, baseYear):
    UserFortuneCookieAnalysisTradeSetAddBaseYear(builder, baseYear)

def UserFortuneCookieAnalysisTradeSetAddBaseMonth(builder, baseMonth):
    builder.PrependUint8Slot(4, baseMonth, 0)

def AddBaseMonth(builder, baseMonth):
    UserFortuneCookieAnalysisTradeSetAddBaseMonth(builder, baseMonth)

def UserFortuneCookieAnalysisTradeSetAddMonthCount(builder, monthCount):
    builder.PrependUint32Slot(5, monthCount, 0)

def AddMonthCount(builder, monthCount):
    UserFortuneCookieAnalysisTradeSetAddMonthCount(builder, monthCount)

def UserFortuneCookieAnalysisTradeSetAddMonthConsume(builder, monthConsume):
    builder.PrependUint32Slot(6, monthConsume, 0)

def AddMonthConsume(builder, monthConsume):
    UserFortuneCookieAnalysisTradeSetAddMonthConsume(builder, monthConsume)

def UserFortuneCookieAnalysisTradeSetAddPreviousCount(builder, previousCount):
    builder.PrependUint32Slot(7, previousCount, 0)

def AddPreviousCount(builder, previousCount):
    UserFortuneCookieAnalysisTradeSetAddPreviousCount(builder, previousCount)

def UserFortuneCookieAnalysisTradeSetAddPreviousConsume(builder, previousConsume):
    builder.PrependUint32Slot(8, previousConsume, 0)

def AddPreviousConsume(builder, previousConsume):
    UserFortuneCookieAnalysisTradeSetAddPreviousConsume(builder, previousConsume)

def UserFortuneCookieAnalysisTradeSetAddElements(builder, elements):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(elements), 0)

def AddElements(builder, elements):
    UserFortuneCookieAnalysisTradeSetAddElements(builder, elements)

def UserFortuneCookieAnalysisTradeSetStartElementsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartElementsVector(builder, numElems):
    return UserFortuneCookieAnalysisTradeSetStartElementsVector(builder, numElems)

def UserFortuneCookieAnalysisTradeSetEnd(builder):
    return builder.EndObject()

def End(builder):
    return UserFortuneCookieAnalysisTradeSetEnd(builder)
