# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Acpcc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class UserMaterialDropInfoItemDropInfoOneSlot(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UserMaterialDropInfoItemDropInfoOneSlot()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsUserMaterialDropInfoItemDropInfoOneSlot(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # UserMaterialDropInfoItemDropInfoOneSlot
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # UserMaterialDropInfoItemDropInfoOneSlot
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserMaterialDropInfoItemDropInfoOneSlot
    def ItemPosId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # UserMaterialDropInfoItemDropInfoOneSlot
    def ItemLabel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # UserMaterialDropInfoItemDropInfoOneSlot
    def IsActive(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # UserMaterialDropInfoItemDropInfoOneSlot
    def SizeList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # UserMaterialDropInfoItemDropInfoOneSlot
    def SizeListAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # UserMaterialDropInfoItemDropInfoOneSlot
    def SizeListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # UserMaterialDropInfoItemDropInfoOneSlot
    def SizeListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

def UserMaterialDropInfoItemDropInfoOneSlotStart(builder):
    builder.StartObject(5)

def Start(builder):
    UserMaterialDropInfoItemDropInfoOneSlotStart(builder)

def UserMaterialDropInfoItemDropInfoOneSlotAddId(builder, id):
    builder.PrependUint32Slot(0, id, 0)

def AddId(builder, id):
    UserMaterialDropInfoItemDropInfoOneSlotAddId(builder, id)

def UserMaterialDropInfoItemDropInfoOneSlotAddItemPosId(builder, itemPosId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(itemPosId), 0)

def AddItemPosId(builder, itemPosId):
    UserMaterialDropInfoItemDropInfoOneSlotAddItemPosId(builder, itemPosId)

def UserMaterialDropInfoItemDropInfoOneSlotAddItemLabel(builder, itemLabel):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(itemLabel), 0)

def AddItemLabel(builder, itemLabel):
    UserMaterialDropInfoItemDropInfoOneSlotAddItemLabel(builder, itemLabel)

def UserMaterialDropInfoItemDropInfoOneSlotAddIsActive(builder, isActive):
    builder.PrependBoolSlot(3, isActive, 0)

def AddIsActive(builder, isActive):
    UserMaterialDropInfoItemDropInfoOneSlotAddIsActive(builder, isActive)

def UserMaterialDropInfoItemDropInfoOneSlotAddSizeList(builder, sizeList):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(sizeList), 0)

def AddSizeList(builder, sizeList):
    UserMaterialDropInfoItemDropInfoOneSlotAddSizeList(builder, sizeList)

def UserMaterialDropInfoItemDropInfoOneSlotStartSizeListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartSizeListVector(builder, numElems):
    return UserMaterialDropInfoItemDropInfoOneSlotStartSizeListVector(builder, numElems)

def UserMaterialDropInfoItemDropInfoOneSlotEnd(builder):
    return builder.EndObject()

def End(builder):
    return UserMaterialDropInfoItemDropInfoOneSlotEnd(builder)
