# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Acpcc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class UserItemSizeRecordOneSlot(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UserItemSizeRecordOneSlot()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsUserItemSizeRecordOneSlot(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # UserItemSizeRecordOneSlot
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # UserItemSizeRecordOneSlot
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserItemSizeRecordOneSlot
    def ItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserItemSizeRecordOneSlot
    def IsFixed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # UserItemSizeRecordOneSlot
    def SizeMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserItemSizeRecordOneSlot
    def SizeMin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def UserItemSizeRecordOneSlotStart(builder):
    builder.StartObject(5)

def Start(builder):
    UserItemSizeRecordOneSlotStart(builder)

def UserItemSizeRecordOneSlotAddId(builder, id):
    builder.PrependUint32Slot(0, id, 0)

def AddId(builder, id):
    UserItemSizeRecordOneSlotAddId(builder, id)

def UserItemSizeRecordOneSlotAddItemId(builder, itemId):
    builder.PrependUint32Slot(1, itemId, 0)

def AddItemId(builder, itemId):
    UserItemSizeRecordOneSlotAddItemId(builder, itemId)

def UserItemSizeRecordOneSlotAddIsFixed(builder, isFixed):
    builder.PrependBoolSlot(2, isFixed, 0)

def AddIsFixed(builder, isFixed):
    UserItemSizeRecordOneSlotAddIsFixed(builder, isFixed)

def UserItemSizeRecordOneSlotAddSizeMax(builder, sizeMax):
    builder.PrependInt32Slot(3, sizeMax, 0)

def AddSizeMax(builder, sizeMax):
    UserItemSizeRecordOneSlotAddSizeMax(builder, sizeMax)

def UserItemSizeRecordOneSlotAddSizeMin(builder, sizeMin):
    builder.PrependInt32Slot(4, sizeMin, 0)

def AddSizeMin(builder, sizeMin):
    UserItemSizeRecordOneSlotAddSizeMin(builder, sizeMin)

def UserItemSizeRecordOneSlotEnd(builder):
    return builder.EndObject()

def End(builder):
    return UserItemSizeRecordOneSlotEnd(builder)
