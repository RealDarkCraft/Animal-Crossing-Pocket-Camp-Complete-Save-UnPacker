# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Acpcc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class UserAssistantHelpTargets(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UserAssistantHelpTargets()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsUserAssistantHelpTargets(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # UserAssistantHelpTargets
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # UserAssistantHelpTargets
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserAssistantHelpTargets
    def AppearAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # UserAssistantHelpTargets
    def HelpState(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserAssistantHelpTargets
    def NpcIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # UserAssistantHelpTargets
    def NpcIdsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # UserAssistantHelpTargets
    def NpcIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # UserAssistantHelpTargets
    def NpcIdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # UserAssistantHelpTargets
    def QuestRanks(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # UserAssistantHelpTargets
    def QuestRanksAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # UserAssistantHelpTargets
    def QuestRanksLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # UserAssistantHelpTargets
    def QuestRanksIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

def UserAssistantHelpTargetsStart(builder):
    builder.StartObject(5)

def Start(builder):
    UserAssistantHelpTargetsStart(builder)

def UserAssistantHelpTargetsAddId(builder, id):
    builder.PrependUint32Slot(0, id, 0)

def AddId(builder, id):
    UserAssistantHelpTargetsAddId(builder, id)

def UserAssistantHelpTargetsAddAppearAt(builder, appearAt):
    builder.PrependInt64Slot(1, appearAt, 0)

def AddAppearAt(builder, appearAt):
    UserAssistantHelpTargetsAddAppearAt(builder, appearAt)

def UserAssistantHelpTargetsAddHelpState(builder, helpState):
    builder.PrependInt32Slot(2, helpState, 0)

def AddHelpState(builder, helpState):
    UserAssistantHelpTargetsAddHelpState(builder, helpState)

def UserAssistantHelpTargetsAddNpcIds(builder, npcIds):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(npcIds), 0)

def AddNpcIds(builder, npcIds):
    UserAssistantHelpTargetsAddNpcIds(builder, npcIds)

def UserAssistantHelpTargetsStartNpcIdsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartNpcIdsVector(builder, numElems):
    return UserAssistantHelpTargetsStartNpcIdsVector(builder, numElems)

def UserAssistantHelpTargetsAddQuestRanks(builder, questRanks):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(questRanks), 0)

def AddQuestRanks(builder, questRanks):
    UserAssistantHelpTargetsAddQuestRanks(builder, questRanks)

def UserAssistantHelpTargetsStartQuestRanksVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartQuestRanksVector(builder, numElems):
    return UserAssistantHelpTargetsStartQuestRanksVector(builder, numElems)

def UserAssistantHelpTargetsEnd(builder):
    return builder.EndObject()

def End(builder):
    return UserAssistantHelpTargetsEnd(builder)
