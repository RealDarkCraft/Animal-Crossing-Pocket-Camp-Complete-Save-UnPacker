# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Acpcc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class UserChallengeSlotSetElement(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UserChallengeSlotSetElement()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsUserChallengeSlotSetElement(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # UserChallengeSlotSetElement
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # UserChallengeSlotSetElement
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserChallengeSlotSetElement
    def IsAchieve(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # UserChallengeSlotSetElement
    def ChallengeType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserChallengeSlotSetElement
    def MissionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserChallengeSlotSetElement
    def Counter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def UserChallengeSlotSetElementStart(builder):
    builder.StartObject(5)

def Start(builder):
    UserChallengeSlotSetElementStart(builder)

def UserChallengeSlotSetElementAddId(builder, id):
    builder.PrependUint32Slot(0, id, 0)

def AddId(builder, id):
    UserChallengeSlotSetElementAddId(builder, id)

def UserChallengeSlotSetElementAddIsAchieve(builder, isAchieve):
    builder.PrependBoolSlot(1, isAchieve, 0)

def AddIsAchieve(builder, isAchieve):
    UserChallengeSlotSetElementAddIsAchieve(builder, isAchieve)

def UserChallengeSlotSetElementAddChallengeType(builder, challengeType):
    builder.PrependInt32Slot(2, challengeType, 0)

def AddChallengeType(builder, challengeType):
    UserChallengeSlotSetElementAddChallengeType(builder, challengeType)

def UserChallengeSlotSetElementAddMissionId(builder, missionId):
    builder.PrependUint32Slot(3, missionId, 0)

def AddMissionId(builder, missionId):
    UserChallengeSlotSetElementAddMissionId(builder, missionId)

def UserChallengeSlotSetElementAddCounter(builder, counter):
    builder.PrependInt32Slot(4, counter, 0)

def AddCounter(builder, counter):
    UserChallengeSlotSetElementAddCounter(builder, counter)

def UserChallengeSlotSetElementEnd(builder):
    return builder.EndObject()

def End(builder):
    return UserChallengeSlotSetElementEnd(builder)
