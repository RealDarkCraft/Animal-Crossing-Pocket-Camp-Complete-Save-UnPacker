# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Acpcc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class UserTradingShipResultDataOneSlot(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UserTradingShipResultDataOneSlot()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsUserTradingShipResultDataOneSlot(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # UserTradingShipResultDataOneSlot
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # UserTradingShipResultDataOneSlot
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserTradingShipResultDataOneSlot
    def RewardType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserTradingShipResultDataOneSlot
    def Amount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserTradingShipResultDataOneSlot
    def Label(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # UserTradingShipResultDataOneSlot
    def AdditionalReward(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def UserTradingShipResultDataOneSlotStart(builder):
    builder.StartObject(5)

def Start(builder):
    UserTradingShipResultDataOneSlotStart(builder)

def UserTradingShipResultDataOneSlotAddId(builder, id):
    builder.PrependUint32Slot(0, id, 0)

def AddId(builder, id):
    UserTradingShipResultDataOneSlotAddId(builder, id)

def UserTradingShipResultDataOneSlotAddRewardType(builder, rewardType):
    builder.PrependInt32Slot(1, rewardType, 0)

def AddRewardType(builder, rewardType):
    UserTradingShipResultDataOneSlotAddRewardType(builder, rewardType)

def UserTradingShipResultDataOneSlotAddAmount(builder, amount):
    builder.PrependInt32Slot(2, amount, 0)

def AddAmount(builder, amount):
    UserTradingShipResultDataOneSlotAddAmount(builder, amount)

def UserTradingShipResultDataOneSlotAddLabel(builder, label):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(label), 0)

def AddLabel(builder, label):
    UserTradingShipResultDataOneSlotAddLabel(builder, label)

def UserTradingShipResultDataOneSlotAddAdditionalReward(builder, additionalReward):
    builder.PrependBoolSlot(4, additionalReward, 0)

def AddAdditionalReward(builder, additionalReward):
    UserTradingShipResultDataOneSlotAddAdditionalReward(builder, additionalReward)

def UserTradingShipResultDataOneSlotEnd(builder):
    return builder.EndObject()

def End(builder):
    return UserTradingShipResultDataOneSlotEnd(builder)
