# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Acpcc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ExtMyCoordinateOneSlot(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ExtMyCoordinateOneSlot()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsExtMyCoordinateOneSlot(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ExtMyCoordinateOneSlot
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ExtMyCoordinateOneSlot
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # ExtMyCoordinateOneSlot
    def MyCoordinateId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ExtMyCoordinateOneSlot
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ExtMyCoordinateOneSlot
    def ItemIdList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # ExtMyCoordinateOneSlot
    def ItemIdListAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # ExtMyCoordinateOneSlot
    def ItemIdListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ExtMyCoordinateOneSlot
    def ItemIdListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # ExtMyCoordinateOneSlot
    def MyDesignIdList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # ExtMyCoordinateOneSlot
    def MyDesignIdListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ExtMyCoordinateOneSlot
    def MyDesignIdListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

def ExtMyCoordinateOneSlotStart(builder):
    builder.StartObject(5)

def Start(builder):
    ExtMyCoordinateOneSlotStart(builder)

def ExtMyCoordinateOneSlotAddId(builder, id):
    builder.PrependUint32Slot(0, id, 0)

def AddId(builder, id):
    ExtMyCoordinateOneSlotAddId(builder, id)

def ExtMyCoordinateOneSlotAddMyCoordinateId(builder, myCoordinateId):
    builder.PrependInt32Slot(1, myCoordinateId, 0)

def AddMyCoordinateId(builder, myCoordinateId):
    ExtMyCoordinateOneSlotAddMyCoordinateId(builder, myCoordinateId)

def ExtMyCoordinateOneSlotAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    ExtMyCoordinateOneSlotAddName(builder, name)

def ExtMyCoordinateOneSlotAddItemIdList(builder, itemIdList):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(itemIdList), 0)

def AddItemIdList(builder, itemIdList):
    ExtMyCoordinateOneSlotAddItemIdList(builder, itemIdList)

def ExtMyCoordinateOneSlotStartItemIdListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartItemIdListVector(builder, numElems):
    return ExtMyCoordinateOneSlotStartItemIdListVector(builder, numElems)

def ExtMyCoordinateOneSlotAddMyDesignIdList(builder, myDesignIdList):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(myDesignIdList), 0)

def AddMyDesignIdList(builder, myDesignIdList):
    ExtMyCoordinateOneSlotAddMyDesignIdList(builder, myDesignIdList)

def ExtMyCoordinateOneSlotStartMyDesignIdListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartMyDesignIdListVector(builder, numElems):
    return ExtMyCoordinateOneSlotStartMyDesignIdListVector(builder, numElems)

def ExtMyCoordinateOneSlotEnd(builder):
    return builder.EndObject()

def End(builder):
    return ExtMyCoordinateOneSlotEnd(builder)
