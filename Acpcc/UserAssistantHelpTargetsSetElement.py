# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Acpcc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class UserAssistantHelpTargetsSetElement(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UserAssistantHelpTargetsSetElement()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsUserAssistantHelpTargetsSetElement(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # UserAssistantHelpTargetsSetElement
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # UserAssistantHelpTargetsSetElement
    def AppearAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # UserAssistantHelpTargetsSetElement
    def HelpState(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserAssistantHelpTargetsSetElement
    def NpcIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # UserAssistantHelpTargetsSetElement
    def NpcIdsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # UserAssistantHelpTargetsSetElement
    def NpcIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # UserAssistantHelpTargetsSetElement
    def NpcIdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # UserAssistantHelpTargetsSetElement
    def QuestRanks(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # UserAssistantHelpTargetsSetElement
    def QuestRanksAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # UserAssistantHelpTargetsSetElement
    def QuestRanksLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # UserAssistantHelpTargetsSetElement
    def QuestRanksIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def UserAssistantHelpTargetsSetElementStart(builder):
    builder.StartObject(4)

def Start(builder):
    UserAssistantHelpTargetsSetElementStart(builder)

def UserAssistantHelpTargetsSetElementAddAppearAt(builder, appearAt):
    builder.PrependInt64Slot(0, appearAt, 0)

def AddAppearAt(builder, appearAt):
    UserAssistantHelpTargetsSetElementAddAppearAt(builder, appearAt)

def UserAssistantHelpTargetsSetElementAddHelpState(builder, helpState):
    builder.PrependInt32Slot(1, helpState, 0)

def AddHelpState(builder, helpState):
    UserAssistantHelpTargetsSetElementAddHelpState(builder, helpState)

def UserAssistantHelpTargetsSetElementAddNpcIds(builder, npcIds):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(npcIds), 0)

def AddNpcIds(builder, npcIds):
    UserAssistantHelpTargetsSetElementAddNpcIds(builder, npcIds)

def UserAssistantHelpTargetsSetElementStartNpcIdsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartNpcIdsVector(builder, numElems):
    return UserAssistantHelpTargetsSetElementStartNpcIdsVector(builder, numElems)

def UserAssistantHelpTargetsSetElementAddQuestRanks(builder, questRanks):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(questRanks), 0)

def AddQuestRanks(builder, questRanks):
    UserAssistantHelpTargetsSetElementAddQuestRanks(builder, questRanks)

def UserAssistantHelpTargetsSetElementStartQuestRanksVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartQuestRanksVector(builder, numElems):
    return UserAssistantHelpTargetsSetElementStartQuestRanksVector(builder, numElems)

def UserAssistantHelpTargetsSetElementEnd(builder):
    return builder.EndObject()

def End(builder):
    return UserAssistantHelpTargetsSetElementEnd(builder)
