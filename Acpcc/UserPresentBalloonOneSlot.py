# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Acpcc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class UserPresentBalloonOneSlot(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UserPresentBalloonOneSlot()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsUserPresentBalloonOneSlot(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # UserPresentBalloonOneSlot
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # UserPresentBalloonOneSlot
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserPresentBalloonOneSlot
    def Enabled(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # UserPresentBalloonOneSlot
    def NpcLabel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # UserPresentBalloonOneSlot
    def Rarity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserPresentBalloonOneSlot
    def PositionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # UserPresentBalloonOneSlot
    def ItemElements(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Acpcc.UserPresentBalloonOneSlotElement import UserPresentBalloonOneSlotElement
            obj = UserPresentBalloonOneSlotElement()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # UserPresentBalloonOneSlot
    def ItemElementsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # UserPresentBalloonOneSlot
    def ItemElementsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

def UserPresentBalloonOneSlotStart(builder):
    builder.StartObject(6)

def Start(builder):
    UserPresentBalloonOneSlotStart(builder)

def UserPresentBalloonOneSlotAddId(builder, id):
    builder.PrependUint32Slot(0, id, 0)

def AddId(builder, id):
    UserPresentBalloonOneSlotAddId(builder, id)

def UserPresentBalloonOneSlotAddEnabled(builder, enabled):
    builder.PrependBoolSlot(1, enabled, 0)

def AddEnabled(builder, enabled):
    UserPresentBalloonOneSlotAddEnabled(builder, enabled)

def UserPresentBalloonOneSlotAddNpcLabel(builder, npcLabel):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(npcLabel), 0)

def AddNpcLabel(builder, npcLabel):
    UserPresentBalloonOneSlotAddNpcLabel(builder, npcLabel)

def UserPresentBalloonOneSlotAddRarity(builder, rarity):
    builder.PrependInt32Slot(3, rarity, 0)

def AddRarity(builder, rarity):
    UserPresentBalloonOneSlotAddRarity(builder, rarity)

def UserPresentBalloonOneSlotAddPositionId(builder, positionId):
    builder.PrependUint8Slot(4, positionId, 0)

def AddPositionId(builder, positionId):
    UserPresentBalloonOneSlotAddPositionId(builder, positionId)

def UserPresentBalloonOneSlotAddItemElements(builder, itemElements):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(itemElements), 0)

def AddItemElements(builder, itemElements):
    UserPresentBalloonOneSlotAddItemElements(builder, itemElements)

def UserPresentBalloonOneSlotStartItemElementsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartItemElementsVector(builder, numElems):
    return UserPresentBalloonOneSlotStartItemElementsVector(builder, numElems)

def UserPresentBalloonOneSlotEnd(builder):
    return builder.EndObject()

def End(builder):
    return UserPresentBalloonOneSlotEnd(builder)
