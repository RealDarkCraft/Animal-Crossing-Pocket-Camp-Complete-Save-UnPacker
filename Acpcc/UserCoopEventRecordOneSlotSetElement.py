# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Acpcc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class UserCoopEventRecordOneSlotSetElement(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UserCoopEventRecordOneSlotSetElement()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsUserCoopEventRecordOneSlotSetElement(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # UserCoopEventRecordOneSlotSetElement
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # UserCoopEventRecordOneSlotSetElement
    def EventId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserCoopEventRecordOneSlotSetElement
    def PlayCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # UserCoopEventRecordOneSlotSetElement
    def State(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # UserCoopEventRecordOneSlotSetElement
    def HighScore(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserCoopEventRecordOneSlotSetElement
    def CampaignId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def UserCoopEventRecordOneSlotSetElementStart(builder):
    builder.StartObject(5)

def Start(builder):
    UserCoopEventRecordOneSlotSetElementStart(builder)

def UserCoopEventRecordOneSlotSetElementAddEventId(builder, eventId):
    builder.PrependUint32Slot(0, eventId, 0)

def AddEventId(builder, eventId):
    UserCoopEventRecordOneSlotSetElementAddEventId(builder, eventId)

def UserCoopEventRecordOneSlotSetElementAddPlayCount(builder, playCount):
    builder.PrependUint8Slot(1, playCount, 0)

def AddPlayCount(builder, playCount):
    UserCoopEventRecordOneSlotSetElementAddPlayCount(builder, playCount)

def UserCoopEventRecordOneSlotSetElementAddState(builder, state):
    builder.PrependUint8Slot(2, state, 0)

def AddState(builder, state):
    UserCoopEventRecordOneSlotSetElementAddState(builder, state)

def UserCoopEventRecordOneSlotSetElementAddHighScore(builder, highScore):
    builder.PrependUint32Slot(3, highScore, 0)

def AddHighScore(builder, highScore):
    UserCoopEventRecordOneSlotSetElementAddHighScore(builder, highScore)

def UserCoopEventRecordOneSlotSetElementAddCampaignId(builder, campaignId):
    builder.PrependUint32Slot(4, campaignId, 0)

def AddCampaignId(builder, campaignId):
    UserCoopEventRecordOneSlotSetElementAddCampaignId(builder, campaignId)

def UserCoopEventRecordOneSlotSetElementEnd(builder):
    return builder.EndObject()

def End(builder):
    return UserCoopEventRecordOneSlotSetElementEnd(builder)
