# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Acpcc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class UserVariousQuestElement(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UserVariousQuestElement()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsUserVariousQuestElement(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # UserVariousQuestElement
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # UserVariousQuestElement
    def VariousType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserVariousQuestElement
    def ChoiceList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Acpcc.UserVariousQuestChoicesElement import UserVariousQuestChoicesElement
            obj = UserVariousQuestChoicesElement()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # UserVariousQuestElement
    def ChoiceListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # UserVariousQuestElement
    def ChoiceListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # UserVariousQuestElement
    def RewardList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Acpcc.UserVariousQuestRewardListElement import UserVariousQuestRewardListElement
            obj = UserVariousQuestRewardListElement()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # UserVariousQuestElement
    def RewardListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # UserVariousQuestElement
    def RewardListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # UserVariousQuestElement
    def ExtraRewards(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from Acpcc.UserVariousQuestRewardElement import UserVariousQuestRewardElement
            obj = UserVariousQuestRewardElement()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # UserVariousQuestElement
    def ExtraRewardsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # UserVariousQuestElement
    def ExtraRewardsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # UserVariousQuestElement
    def NpcLotteried(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def UserVariousQuestElementStart(builder):
    builder.StartObject(5)

def Start(builder):
    UserVariousQuestElementStart(builder)

def UserVariousQuestElementAddVariousType(builder, variousType):
    builder.PrependInt32Slot(0, variousType, 0)

def AddVariousType(builder, variousType):
    UserVariousQuestElementAddVariousType(builder, variousType)

def UserVariousQuestElementAddChoiceList(builder, choiceList):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(choiceList), 0)

def AddChoiceList(builder, choiceList):
    UserVariousQuestElementAddChoiceList(builder, choiceList)

def UserVariousQuestElementStartChoiceListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartChoiceListVector(builder, numElems):
    return UserVariousQuestElementStartChoiceListVector(builder, numElems)

def UserVariousQuestElementAddRewardList(builder, rewardList):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(rewardList), 0)

def AddRewardList(builder, rewardList):
    UserVariousQuestElementAddRewardList(builder, rewardList)

def UserVariousQuestElementStartRewardListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartRewardListVector(builder, numElems):
    return UserVariousQuestElementStartRewardListVector(builder, numElems)

def UserVariousQuestElementAddExtraRewards(builder, extraRewards):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(extraRewards), 0)

def AddExtraRewards(builder, extraRewards):
    UserVariousQuestElementAddExtraRewards(builder, extraRewards)

def UserVariousQuestElementStartExtraRewardsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartExtraRewardsVector(builder, numElems):
    return UserVariousQuestElementStartExtraRewardsVector(builder, numElems)

def UserVariousQuestElementAddNpcLotteried(builder, npcLotteried):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(npcLotteried), 0)

def AddNpcLotteried(builder, npcLotteried):
    UserVariousQuestElementAddNpcLotteried(builder, npcLotteried)

def UserVariousQuestElementEnd(builder):
    return builder.EndObject()

def End(builder):
    return UserVariousQuestElementEnd(builder)
