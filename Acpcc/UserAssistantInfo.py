# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Acpcc

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class UserAssistantInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UserAssistantInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsUserAssistantInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # UserAssistantInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # UserAssistantInfo
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserAssistantInfo
    def WalkWith(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # UserAssistantInfo
    def IsFirstOpeningEnded(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # UserAssistantInfo
    def IncrementAssignedDaysAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # UserAssistantInfo
    def CurrentAssignedDays(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserAssistantInfo
    def CurrentHelpCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserAssistantInfo
    def HelpCountForAutoCollection(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UserAssistantInfo
    def CampaignIdForGardeningAnimals(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # UserAssistantInfo
    def GardeningAnimalCounts(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # UserAssistantInfo
    def GardeningAnimalCountsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # UserAssistantInfo
    def GardeningAnimalCountsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # UserAssistantInfo
    def GardeningAnimalCountsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # UserAssistantInfo
    def IsDiaryFixed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def UserAssistantInfoStart(builder):
    builder.StartObject(10)

def Start(builder):
    UserAssistantInfoStart(builder)

def UserAssistantInfoAddId(builder, id):
    builder.PrependUint32Slot(0, id, 0)

def AddId(builder, id):
    UserAssistantInfoAddId(builder, id)

def UserAssistantInfoAddWalkWith(builder, walkWith):
    builder.PrependBoolSlot(1, walkWith, 0)

def AddWalkWith(builder, walkWith):
    UserAssistantInfoAddWalkWith(builder, walkWith)

def UserAssistantInfoAddIsFirstOpeningEnded(builder, isFirstOpeningEnded):
    builder.PrependBoolSlot(2, isFirstOpeningEnded, 0)

def AddIsFirstOpeningEnded(builder, isFirstOpeningEnded):
    UserAssistantInfoAddIsFirstOpeningEnded(builder, isFirstOpeningEnded)

def UserAssistantInfoAddIncrementAssignedDaysAt(builder, incrementAssignedDaysAt):
    builder.PrependInt64Slot(3, incrementAssignedDaysAt, 0)

def AddIncrementAssignedDaysAt(builder, incrementAssignedDaysAt):
    UserAssistantInfoAddIncrementAssignedDaysAt(builder, incrementAssignedDaysAt)

def UserAssistantInfoAddCurrentAssignedDays(builder, currentAssignedDays):
    builder.PrependInt32Slot(4, currentAssignedDays, 0)

def AddCurrentAssignedDays(builder, currentAssignedDays):
    UserAssistantInfoAddCurrentAssignedDays(builder, currentAssignedDays)

def UserAssistantInfoAddCurrentHelpCount(builder, currentHelpCount):
    builder.PrependInt32Slot(5, currentHelpCount, 0)

def AddCurrentHelpCount(builder, currentHelpCount):
    UserAssistantInfoAddCurrentHelpCount(builder, currentHelpCount)

def UserAssistantInfoAddHelpCountForAutoCollection(builder, helpCountForAutoCollection):
    builder.PrependInt32Slot(6, helpCountForAutoCollection, 0)

def AddHelpCountForAutoCollection(builder, helpCountForAutoCollection):
    UserAssistantInfoAddHelpCountForAutoCollection(builder, helpCountForAutoCollection)

def UserAssistantInfoAddCampaignIdForGardeningAnimals(builder, campaignIdForGardeningAnimals):
    builder.PrependUint32Slot(7, campaignIdForGardeningAnimals, 0)

def AddCampaignIdForGardeningAnimals(builder, campaignIdForGardeningAnimals):
    UserAssistantInfoAddCampaignIdForGardeningAnimals(builder, campaignIdForGardeningAnimals)

def UserAssistantInfoAddGardeningAnimalCounts(builder, gardeningAnimalCounts):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(gardeningAnimalCounts), 0)

def AddGardeningAnimalCounts(builder, gardeningAnimalCounts):
    UserAssistantInfoAddGardeningAnimalCounts(builder, gardeningAnimalCounts)

def UserAssistantInfoStartGardeningAnimalCountsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartGardeningAnimalCountsVector(builder, numElems):
    return UserAssistantInfoStartGardeningAnimalCountsVector(builder, numElems)

def UserAssistantInfoAddIsDiaryFixed(builder, isDiaryFixed):
    builder.PrependBoolSlot(9, isDiaryFixed, 0)

def AddIsDiaryFixed(builder, isDiaryFixed):
    UserAssistantInfoAddIsDiaryFixed(builder, isDiaryFixed)

def UserAssistantInfoEnd(builder):
    return builder.EndObject()

def End(builder):
    return UserAssistantInfoEnd(builder)
